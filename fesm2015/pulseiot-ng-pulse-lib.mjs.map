{"version":3,"file":"pulseiot-ng-pulse-lib.mjs","sources":["../../../projects/ng-pulse-lib/src/lib/common/AccountRole.ts","../../../projects/ng-pulse-lib/src/lib/common/FloatKeyValue.ts","../../../projects/ng-pulse-lib/src/lib/common/Indicator.ts","../../../projects/ng-pulse-lib/src/lib/common/IntKeyValue.ts","../../../projects/ng-pulse-lib/src/lib/common/LoginParams.ts","../../../projects/ng-pulse-lib/src/lib/common/StringIntValue.ts","../../../projects/ng-pulse-lib/src/lib/common/StringKeyValue.ts","../../../projects/ng-pulse-lib/src/lib/common/TimeDataPoint.ts","../../../projects/ng-pulse-lib/src/lib/common/TimeDataPoint2D.ts","../../../projects/ng-pulse-lib/src/lib/common/TimeDataPointFloat.ts","../../../projects/ng-pulse-lib/src/lib/common/TimeFrame.ts","../../../projects/ng-pulse-lib/src/lib/common/TimeSeries.ts","../../../projects/ng-pulse-lib/src/lib/common/TimeSeriesOf2D.ts","../../../projects/ng-pulse-lib/src/lib/common/TimeSeriesOfFloat.ts","../../../projects/ng-pulse-lib/src/lib/common/TokenData.ts","../../../projects/ng-pulse-lib/src/lib/common/ZScore.ts","../../../projects/ng-pulse-lib/src/lib/entities/BaseEntity.ts","../../../projects/ng-pulse-lib/src/lib/entities/Account.ts","../../../projects/ng-pulse-lib/src/lib/entities/AccountSettings.ts","../../../projects/ng-pulse-lib/src/lib/entities/AuditLog.ts","../../../projects/ng-pulse-lib/src/lib/entities/Checkpoint.ts","../../../projects/ng-pulse-lib/src/lib/entities/DNSRecord.ts","../../../projects/ng-pulse-lib/src/lib/entities/DataIngestion.ts","../../../projects/ng-pulse-lib/src/lib/entities/Device.ts","../../../projects/ng-pulse-lib/src/lib/entities/DeviceWithEvents.ts","../../../projects/ng-pulse-lib/src/lib/entities/Event.ts","../../../projects/ng-pulse-lib/src/lib/entities/EventWithDevice.ts","../../../projects/ng-pulse-lib/src/lib/entities/IntDistribution.ts","../../../projects/ng-pulse-lib/src/lib/entities/Integration.ts","../../../projects/ng-pulse-lib/src/lib/entities/Member.ts","../../../projects/ng-pulse-lib/src/lib/entities/Rule.ts","../../../projects/ng-pulse-lib/src/lib/entities/RuleTemplate.ts","../../../projects/ng-pulse-lib/src/lib/entities/SessionRecord.ts","../../../projects/ng-pulse-lib/src/lib/entities/Shieldex.ts","../../../projects/ng-pulse-lib/src/lib/entities/Stream.ts","../../../projects/ng-pulse-lib/src/lib/entities/StreamConfig.ts","../../../projects/ng-pulse-lib/src/lib/entities/UsageRecord.ts","../../../projects/ng-pulse-lib/src/lib/entities/User.ts","../../../projects/ng-pulse-lib/src/lib/entities/UserMembership.ts","../../../projects/ng-pulse-lib/src/lib/entities/UserMemberships.ts","../../../projects/ng-pulse-lib/src/lib/enums/AccountStatusCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/AccountTypeCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/DeviceActionCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/DeviceStatusCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/DeviceTypeCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/EventCategoryCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/EventStatusCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/EventTypeCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/IntegrationTypeCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/MemberRoleCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/RuleTypeCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/SeverityTypeCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/UserStatusCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/UserTypeCode.ts","../../../projects/ng-pulse-lib/src/utils/BaseRestResponse.ts","../../../projects/ng-pulse-lib/src/utils/ActionResponse.ts","../../../projects/ng-pulse-lib/src/utils/EntityResponse.ts","../../../projects/ng-pulse-lib/src/utils/EntitiesResponse.ts","../../../projects/ng-pulse-lib/src/utils/rest-util.ts","../../../projects/ng-pulse-lib/src/config.ts","../../../projects/ng-pulse-lib/src/lib/services/devicesService.ts","../../../projects/ng-pulse-lib/src/lib/services/eventsService.ts","../../../projects/ng-pulse-lib/src/lib/services/sysAccountsService.ts","../../../projects/ng-pulse-lib/src/lib/services/sysMembersService.ts","../../../projects/ng-pulse-lib/src/lib/services/sysRuleTemplatesService.ts","../../../projects/ng-pulse-lib/src/lib/services/sysRulesService.ts","../../../projects/ng-pulse-lib/src/lib/services/sysStreamsService.ts","../../../projects/ng-pulse-lib/src/lib/services/sysUsersService.ts","../../../projects/ng-pulse-lib/src/lib/services/usrIntegrationsService.ts","../../../projects/ng-pulse-lib/src/lib/services/userService.ts","../../../projects/ng-pulse-lib/src/lib/services/services.export.ts","../../../projects/ng-pulse-lib/src/pulse-lib.module.ts","../../../projects/ng-pulse-lib/src/public-api.ts","../../../projects/ng-pulse-lib/src/pulseiot-ng-pulse-lib.ts"],"sourcesContent":["import { MemberRoleCode } from '../enums/MemberRoleCode';\n\n\n\n// Account role represents the role of the user in the account\nexport class AccountRole {\n \n    // Account Id \n    public accountId: string;\n \n    // Account Name (for display only) \n    public accountName: string;\n \n    // User role in the account: UNDEFINED | ADMIN | OPERATOR | VIEWER \n    public role: MemberRoleCode;\n \n     constructor(accountId?: string, accountName?: string, role?: MemberRoleCode) { \n        if (accountId !== undefined) { this.accountId = accountId; }\n        if (accountName !== undefined) { this.accountName = accountName; }\n        if (role !== undefined) { this.role = role; }\n    }\n\n}\n\n\n","\n\n\n// Key Value float tuple\nexport class FloatKeyValue {\n \n    // Key of tuple \n    public key: number;\n \n    // Value of tuple \n    public value: number;\n \n     constructor(key?: number, value?: number) { \n        if (key !== undefined) { this.key = key; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","\n\n\n// Indicator model represents a feature and feature value within a normal range\nexport class Indicator {\n \n    // Feature name \n    public name: string;\n \n    // Level of Significance \n    public significance: number;\n \n    // Min normal value \n    public min: number;\n \n    // Max normal value \n    public max: number;\n \n    // Actual value of the feature \n    public actual: number;\n \n     constructor(name?: string, significance?: number, min?: number, max?: number, actual?: number) { \n        if (name !== undefined) { this.name = name; }\n        if (significance !== undefined) { this.significance = significance; }\n        if (min !== undefined) { this.min = min; }\n        if (max !== undefined) { this.max = max; }\n        if (actual !== undefined) { this.actual = actual; }\n    }\n\n}\n\n\n","\n\n\n// Key Value int tuple\nexport class IntKeyValue {\n \n    // Key of tuple \n    public key: number;\n \n    // Value of tuple \n    public value: number;\n \n     constructor(key?: number, value?: number) { \n        if (key !== undefined) { this.key = key; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","\n\n\n// Login parameters data model\nexport class LoginParams {\n \n    // User email \n    public email: string;\n \n    // User password \n    public password: string;\n \n    // Access token - in case of re-login with existing token \n    public accessToken: string;\n \n     constructor(email?: string, password?: string, accessToken?: string) { \n        if (email !== undefined) { this.email = email; }\n        if (password !== undefined) { this.password = password; }\n        if (accessToken !== undefined) { this.accessToken = accessToken; }\n    }\n\n}\n\n\n","\n\n\n// String Int Value tuple\nexport class StringIntValue {\n \n    // Key of tuple \n    public key: string;\n \n    // Value of tuple \n    public value: number;\n \n     constructor(key?: string, value?: number) { \n        if (key !== undefined) { this.key = key; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","\n\n\n// Key Value string tuple\nexport class StringKeyValue {\n \n    // Key of tuple \n    public key: string;\n \n    // Value of tuple \n    public value: string;\n \n     constructor(key?: string, value?: string) { \n        if (key !== undefined) { this.key = key; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","\n\n\n// TimeDataPoint model represents a generic datapoint in time\nexport class TimeDataPoint {\n \n    // Sata point timestamp [Epoch milliseconds Timestamp] \n    public timestamp: number;\n \n    // Generic value \n    public value: any;\n \n     constructor(timestamp?: number, value?: any) { \n        if (timestamp !== undefined) { this.timestamp = timestamp; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","import { FloatKeyValue } from '../common/FloatKeyValue';\n\n\n\n// TimeDataPoint2D model represents a 2 dimensions datapoint in time\nexport class TimeDataPoint2D {\n \n    // Sata point timestamp [Epoch milliseconds Timestamp] \n    public timestamp: number;\n \n    // Float value \n    public value: FloatKeyValue[];\n \n     constructor(timestamp?: number, value?: FloatKeyValue[]) { \n        if (timestamp !== undefined) { this.timestamp = timestamp; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","\n\n\n// TimeDataPointFloat model represents a float datapoint in time\nexport class TimeDataPointFloat {\n \n    // Sata point timestamp [Epoch milliseconds Timestamp] \n    public timestamp: number;\n \n    // Float value \n    public value: number;\n \n     constructor(timestamp?: number, value?: number) { \n        if (timestamp !== undefined) { this.timestamp = timestamp; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","\n\n\n// TimeFrame represents a finite time window (from - to)\nexport class TimeFrame {\n \n    // Start window time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // End window time [Epoch milliseconds Timestamp] \n    public to: number;\n \n     constructor(from?: number, to?: number) { \n        if (from !== undefined) { this.from = from; }\n        if (to !== undefined) { this.to = to; }\n    }\n\n}\n\n\n","import { TimeFrame } from '../common/TimeFrame';\nimport { TimeDataPoint } from '../common/TimeDataPoint';\n\n\n\n// TimeSeries model represents a generic set of data points over time\nexport class TimeSeries {\n \n    // Name of the time series \n    public name: string;\n \n    // Range of the series (from ... to) \n    public range: TimeFrame;\n \n    // Series of generic data points \n    public values: TimeDataPoint[];\n \n     constructor(name?: string, range?: TimeFrame, values?: TimeDataPoint[]) { \n        if (name !== undefined) { this.name = name; }\n        if (range !== undefined) { this.range = range; }\n        if (values !== undefined) { this.values = values; }\n    }\n\n}\n\n\n","import { TimeFrame } from '../common/TimeFrame';\nimport { TimeDataPoint2D } from '../common/TimeDataPoint2D';\n\n\n\n// TimeSeriesOf2D model represents a 2 dimension time series\nexport class TimeSeriesOf2D {\n \n    // Name of the time series \n    public name: string;\n \n    // Range of the series (from ... to) \n    public range: TimeFrame;\n \n    // Series of float data points \n    public values: TimeDataPoint2D[];\n \n     constructor(name?: string, range?: TimeFrame, values?: TimeDataPoint2D[]) { \n        if (name !== undefined) { this.name = name; }\n        if (range !== undefined) { this.range = range; }\n        if (values !== undefined) { this.values = values; }\n    }\n\n}\n\n\n","import { TimeFrame } from '../common/TimeFrame';\nimport { TimeDataPointFloat } from '../common/TimeDataPointFloat';\n\n\n\n// TimeSeriesOfFloat model represents a float set of data points over time\nexport class TimeSeriesOfFloat {\n \n    // Name of the time series \n    public name: string;\n \n    // Range of the series (from ... to) \n    public range: TimeFrame;\n \n    // Series of float data points \n    public values: TimeDataPointFloat[];\n \n     constructor(name?: string, range?: TimeFrame, values?: TimeDataPointFloat[]) { \n        if (name !== undefined) { this.name = name; }\n        if (range !== undefined) { this.range = range; }\n        if (values !== undefined) { this.values = values; }\n    }\n\n}\n\n\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { MemberRoleCode } from '../enums/MemberRoleCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\n\n\n\n// TokenData model represents a user in account which is encrypted with the JWT token\nexport class TokenData {\n \n    // Account ID \n    public accountId: string;\n \n    // Authenticated subject ID (can be user, or service account) \n    public subjectId: string;\n \n    // Subject type: UNDEFINED | SYSADMIN | USER | SERVICE_ACCOUNT \n    public subjectType: UserTypeCode;\n \n    // Role of user in the account: UNDEFINED | ADMIN | USER \n    public role: MemberRoleCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    public status: UserStatusCode;\n \n    // Token expiration [Epoch milliseconds Timestamp] \n    public expiresIn: number;\n \n     constructor(accountId?: string, subjectId?: string, subjectType?: UserTypeCode, role?: MemberRoleCode, status?: UserStatusCode, expiresIn?: number) { \n        if (accountId !== undefined) { this.accountId = accountId; }\n        if (subjectId !== undefined) { this.subjectId = subjectId; }\n        if (subjectType !== undefined) { this.subjectType = subjectType; }\n        if (role !== undefined) { this.role = role; }\n        if (status !== undefined) { this.status = status; }\n        if (expiresIn !== undefined) { this.expiresIn = expiresIn; }\n    }\n\n}\n\n\n","\n\n\n// ZScore parameters\nexport class ZScore {\n \n    // Mean value \n    public mean: number;\n \n    // Standard Deviation \n    public sD: number;\n \n     constructor(mean?: number, sD?: number) { \n        if (mean !== undefined) { this.mean = mean; }\n        if (sD !== undefined) { this.sD = sD; }\n    }\n\n}\n\n\n","\n\n\n// Base entity includes common fields for all entities (persistence objects) in the system\nexport class BaseEntity {\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n     constructor(id?: string, createdOn?: number, updatedOn?: number) { \n        if (id !== undefined) { this.id = id; }\n        if (createdOn !== undefined) { this.createdOn = createdOn; }\n        if (updatedOn !== undefined) { this.updatedOn = updatedOn; }\n    }\n\n}\n\n\n","import { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\nimport { AccountSettings } from '../entities/AccountSettings';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Account entity in the system represents customer account\nexport class Account extends BaseEntity {\n \n    // Account name \n    public name: string;\n \n    // Account description \n    public description: string;\n \n    // Account Type: UNDEFINED | DEMO | TRIAL | PARTNER | CUSTOMER \n    public type: AccountTypeCode;\n \n    // Account status: UNDEFINED | ACTIVE | SUSPENDED \n    public status: AccountStatusCode;\n \n    // List of associated account groups (for feature toggle) \n    public groups: string[];\n \n    // When the account will be expired [Epoch milliseconds Timestamp] (0 means no expiration time) \n    public expiredOn: number;\n \n    // Account specific attributes \n    public settings: AccountSettings;\n \n \n}\n\n\n","\n\n\n// AccountSettings is a set of account attributes\nexport class AccountSettings {\n \n    // Account logo URL (starts with http) or embedded image (base64) \n    public logo: string;\n \n     constructor(logo?: string) { \n        if (logo !== undefined) { this.logo = logo; }\n    }\n\n}\n\n\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Audit Log - each entry represents a single action done by user\nexport class AuditLog extends BaseEntity {\n \n    // Account Id (empty if it is non-account entity) \n    public accountId: string;\n \n    // User Id \n    public userId: string;\n \n    // User type \n    public userType: UserTypeCode;\n \n    // Action that was performed \n    public action: string;\n \n    // Changed item type \n    public itemType: string;\n \n    // Changed item Id \n    public itemId: string;\n \n    // Item Name \n    public itemName: string;\n \n    // Item value before change [Json] \n    public beforeChange: string;\n \n    // Item delta after change [Json] \n    public afterChange: string;\n \n \n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Checkpoint represents parsing status in time that preserves parsing cycle statistics and last checkpoint (timestamp) to avoid parsing the same files over and over again\nexport class Checkpoint extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Timestamp marking checkpoint time [Epoch milliseconds Timestamp] \n    public checkpoint: number;\n \n    // Checkpoint label (usually file name) \n    public label: string;\n \n    // Total files parsed in this cycle \n    public totalFiles: number;\n \n    // Total packets parsed in this cycle \n    public totalPackets: number;\n \n    // Total usage records created \n    public totalUsage: number;\n \n    // Total session records created \n    public totalSession: number;\n \n \n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// DNSRecord represents network statistics of DNS requests\nexport class DNSRecord extends BaseEntity {\n \n    // Indication to the source location of the record \n    public source: string;\n \n    // Device Id \n    public deviceId: string;\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Start window time [Epoch milliseconds Timestamp] \n    public startTime: number;\n \n    // End window time [Epoch milliseconds Timestamp] \n    public endTime: number;\n \n    // Source IP \n    public sourceIP: string;\n \n    // Fully Qualified Domain Name \n    public fqdn: string;\n \n    // List of A records \n    public records: string[];\n \n \n}\n\n\n","\n\n\n// DataIngestion is the ingestion pipeline configuration\nexport class DataIngestion {\n \n    // Input files locations \n    public inputFilesURIs: string[];\n \n    // Input files extensions (filter by extensions) - ignore if empty \n    public inputFilesExt: string[];\n \n    // Usage time window for aggregation (in seconds) \n    public usageTimeWindowSec: number;\n \n    // Session time window for aggregation (in seconds) \n    public sessionTimeWindowSec: number;\n \n    // Usage data output locations \n    public usageOutputURIs: string[];\n \n    // Usage data output locations \n    public sessionOutputURIs: string[];\n \n    // Usage data output locations \n    public dNSOutputURIs: string[];\n \n    // Where to back-up raw data files \n    public rawDataBackupURI: string;\n \n    // Flag to indicate overwrite existing files \n    public overwriteFiles: boolean;\n \n    // Post-processing file action: DELETE | RENAME | ... \n    public postAction: string;\n \n     constructor(inputFilesURIs?: string[], inputFilesExt?: string[], usageTimeWindowSec?: number, sessionTimeWindowSec?: number, usageOutputURIs?: string[], sessionOutputURIs?: string[], dNSOutputURIs?: string[], rawDataBackupURI?: string, overwriteFiles?: boolean, postAction?: string) { \n        if (inputFilesURIs !== undefined) { this.inputFilesURIs = inputFilesURIs; }\n        if (inputFilesExt !== undefined) { this.inputFilesExt = inputFilesExt; }\n        if (usageTimeWindowSec !== undefined) { this.usageTimeWindowSec = usageTimeWindowSec; }\n        if (sessionTimeWindowSec !== undefined) { this.sessionTimeWindowSec = sessionTimeWindowSec; }\n        if (usageOutputURIs !== undefined) { this.usageOutputURIs = usageOutputURIs; }\n        if (sessionOutputURIs !== undefined) { this.sessionOutputURIs = sessionOutputURIs; }\n        if (dNSOutputURIs !== undefined) { this.dNSOutputURIs = dNSOutputURIs; }\n        if (rawDataBackupURI !== undefined) { this.rawDataBackupURI = rawDataBackupURI; }\n        if (overwriteFiles !== undefined) { this.overwriteFiles = overwriteFiles; }\n        if (postAction !== undefined) { this.postAction = postAction; }\n    }\n\n}\n\n\n","import { DeviceTypeCode } from '../enums/DeviceTypeCode';\nimport { DeviceStatusCode } from '../enums/DeviceStatusCode';\nimport { DeviceActionCode } from '../enums/DeviceActionCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Device entity is an IoT device representation with attributes and state\nexport class Device extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Device name \n    public name: string;\n \n    // Device description \n    public description: string;\n \n    // Device type: UNDEFINED | CONTROLLER | METER | SENSOR ... \n    public type: DeviceTypeCode;\n \n    // Device status: UNDEFINED | PENDING | ACTIVE |  INACTIVE | SUSPENDED \n    public status: DeviceStatusCode;\n \n    // Device last activity timestamp [Epoch milliseconds Timestamp] \n    public lastActivity: number;\n \n    // Device MAC address \n    public mac: string;\n \n    // Device IP address (IPv4 or IPv6) \n    public ip: string;\n \n    // Device mobile subscriber id (IMSI or SUPI for 5G) \n    public sid: string;\n \n    // Device mobile equipment id (IMEI or PEI for 5G) \n    public eid: string;\n \n    // Device current security score \n    public score: number;\n \n    // List of device tags \n    public tags: string[];\n \n    // Number of events for the time period (calculated field) \n    public eventCount: number;\n \n    // Action applied on the device \n    public actionApplied: DeviceActionCode;\n \n    // Who applied the action (user id) \n    public actionAppliedBy: string;\n \n    // When action was applied [Epoch milliseconds Timestamp] \n    public actionAppliedOn: number;\n \n \n}\n\n\n","import { DeviceTypeCode } from '../enums/DeviceTypeCode';\nimport { DeviceStatusCode } from '../enums/DeviceStatusCode';\nimport { DeviceActionCode } from '../enums/DeviceActionCode';\nimport { Event } from '../entities/Event';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// DeviceWithEvents entity is a device with its related events (for display only)\nexport class DeviceWithEvents extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Device name \n    public name: string;\n \n    // Device description \n    public description: string;\n \n    // Device type: UNDEFINED | CONTROLLER | METER | SENSOR ... \n    public type: DeviceTypeCode;\n \n    // Device status: UNDEFINED | PENDING | ACTIVE |  INACTIVE | SUSPENDED \n    public status: DeviceStatusCode;\n \n    // Device last activity timestamp [Epoch milliseconds Timestamp] \n    public lastActivity: number;\n \n    // Device MAC address \n    public mac: string;\n \n    // Device IP address (IPv4 or IPv6) \n    public ip: string;\n \n    // Device mobile subscriber id (IMSI or SUPI for 5G) \n    public sid: string;\n \n    // Device mobile equipment id (IMEI or PEI for 5G) \n    public eid: string;\n \n    // Device current security score \n    public score: number;\n \n    // List of device tags \n    public tags: string[];\n \n    // Number of events for the time period (calculated field) \n    public eventCount: number;\n \n    // Action applied on the device \n    public actionApplied: DeviceActionCode;\n \n    // Who applied the action (user id) \n    public actionAppliedBy: string;\n \n    // When action was applied [Epoch milliseconds Timestamp] \n    public actionAppliedOn: number;\n \n    // Device events list \n    public events: Event[];\n \n \n}\n\n\n","import { EventStatusCode } from '../enums/EventStatusCode';\nimport { Indicator } from '../common/Indicator';\nimport { RuleTypeCode } from '../enums/RuleTypeCode';\nimport { EventCategoryCode } from '../enums/EventCategoryCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { EventTypeCode } from '../enums/EventTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\n\n\n\n// Cyber event entity\nexport class Event extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Device Id \n    public deviceId: string;\n \n    // Start window time [Epoch milliseconds Timestamp] \n    public startTime: number;\n \n    // End window time [Epoch milliseconds Timestamp] \n    public endTime: number;\n \n    // Event type: UNDEFINED | DDOS | PORT_SCANNING | DEVICE_TAKEOVER ... \n    public type: EventTypeCode;\n \n    // Event severity level: UNDEFINED | LOW | MEDIUM | HIGH | CRITICAL \n    public severity: SeverityTypeCode;\n \n    // Event current security score \n    public score: number;\n \n    // Event workflow status: UNDEFINED | NEW | OPEN ... \n    public status: EventStatusCode;\n \n    // List of event indicators \n    public indicators: Indicator[];\n \n    // Rule engine type \n    public ruleType: RuleTypeCode;\n \n    // Static Rule id \n    public ruleId: string;\n \n    // Event description \n    public description: string;\n \n    // Additional Event tags \n    public tags: string[];\n \n    // Event category \n    public category: EventCategoryCode;\n \n    // Recommended action description to apply on the device \n    public recommendedAction: string;\n \n    // List of referenced source files \n    public sources: string[];\n \n \n}\n\n\n","import { EventStatusCode } from '../enums/EventStatusCode';\nimport { Indicator } from '../common/Indicator';\nimport { RuleTypeCode } from '../enums/RuleTypeCode';\nimport { EventCategoryCode } from '../enums/EventCategoryCode';\nimport { Device } from '../entities/Device';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { EventTypeCode } from '../enums/EventTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\n\n\n\n// EventWithDevice entity is an event with the device information (for display only)\nexport class EventWithDevice extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Device Id \n    public deviceId: string;\n \n    // Start window time [Epoch milliseconds Timestamp] \n    public startTime: number;\n \n    // End window time [Epoch milliseconds Timestamp] \n    public endTime: number;\n \n    // Event type: UNDEFINED | DDOS | PORT_SCANNING | DEVICE_TAKEOVER ... \n    public type: EventTypeCode;\n \n    // Event severity level: UNDEFINED | LOW | MEDIUM | HIGH | CRITICAL \n    public severity: SeverityTypeCode;\n \n    // Event current security score \n    public score: number;\n \n    // Event workflow status: UNDEFINED | NEW | OPEN ... \n    public status: EventStatusCode;\n \n    // List of event indicators \n    public indicators: Indicator[];\n \n    // Rule engine type \n    public ruleType: RuleTypeCode;\n \n    // Static Rule id \n    public ruleId: string;\n \n    // Event description \n    public description: string;\n \n    // Additional Event tags \n    public tags: string[];\n \n    // Event category \n    public category: EventCategoryCode;\n \n    // Recommended action description to apply on the device \n    public recommendedAction: string;\n \n    // Device attached to the event \n    public device: Device;\n \n    // List of referenced source files \n    public sources: string[];\n \n \n}\n\n\n","import { IntKeyValue } from '../common/IntKeyValue';\n\n\n\n// IntDistribution model represents a grouped counts of elements of type int (usually enum)\nexport class IntDistribution {\n \n    // Distribution name \n    public name: string;\n \n    // Total count (of all elements) \n    public total: number;\n \n    // List of elements mapped to counter \n    public values: IntKeyValue[];\n \n     constructor(name?: string, total?: number, values?: IntKeyValue[]) { \n        if (name !== undefined) { this.name = name; }\n        if (total !== undefined) { this.total = total; }\n        if (values !== undefined) { this.values = values; }\n    }\n\n}\n\n\n","import { StringKeyValue } from '../common/StringKeyValue';\nimport { EventTypeCode } from '../enums/EventTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IntegrationTypeCode } from '../enums/IntegrationTypeCode';\n\n\n\n// Integration specifications\nexport class Integration extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id (leave empty to apply integration on all streams) \n    public streamId: string;\n \n    // Device Id \n    public deviceId: string;\n \n    // Integration type (HTTP | SMTP | EMAIL | ...) \n    public type: IntegrationTypeCode;\n \n    // Integration name \n    public name: string;\n \n    // Is integration enabled \n    public enabled: boolean;\n \n    // Host name or ip address (applicable for all protocols) \n    public host: string;\n \n    // Port number (applicable for all protocols) \n    public port: number;\n \n    // User (applicable for all protocols) \n    public user: string;\n \n    // Password (applicable for all protocols) \n    public password: string;\n \n    // HTTP protocol URL path (applicable for http/https protocols) \n    public url: string;\n \n    // HTTP protocol Operation: GET | POST | PUT (applicable for http/https protocols) \n    public operation: string;\n \n    // HTTP protocol Headers (applicable for http/https protocols) \n    public headers: StringKeyValue[];\n \n    // Message content mime type \n    public mimeType: string;\n \n    // SMTP/EMAIL protocol List of recipients \n    public recipients: string[];\n \n    // SMTP/EMAIL protocol Message subject template \n    public subject: string;\n \n    // Message body template \n    public body: string;\n \n    // Activate integration only if the event object type code is in the list (empty list means no filter) \n    public eventTypes: EventTypeCode[];\n \n    // Activate integration only if the event severity matching this value \n    public ventSeverity: SeverityTypeCode;\n \n \n}\n\n\n","import { MemberRoleCode } from '../enums/MemberRoleCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Member represents a user in the account and the role he has in this account\n// User may have several memberships for several accounts, each with a different role\nexport class Member extends BaseEntity {\n \n    // User Id \n    public userId: string;\n \n    // Account Id \n    public accountId: string;\n \n    // Member role in the account \n    public role: MemberRoleCode;\n \n \n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Deterministic Rule definition\nexport class Rule extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Rule name \n    public name: string;\n \n    // Rule description \n    public description: string;\n \n    // Flag to indicate if this is a system rule (read-only) or user-defined rule \n    public isSystemRule: boolean;\n \n    // Flag to indicate if this rule is active (true) or suspended (false), only active rules are evaluated \n    public isActiveRule: boolean;\n \n    // Rule context - what is the data type to be injected \n    public context: string;\n \n    // List of AND conditions, all of them must be true for the rule to trigger event \n    public matchAll: string[];\n \n    // List of OR conditions, at least one of them must be true for the rule to trigger event} \n    public matchAny: string[];\n \n \n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// RuleTemplate entity is used to define rules quickly based on pre-defined templates\nexport class RuleTemplate extends BaseEntity {\n \n    // Rule template name \n    public name: string;\n \n    // Rule template description \n    public description: string;\n \n    // Rule context - what is the data type to be injected \n    public context: string;\n \n    // List of AND conditions, all of them must be true for the rule to trigger event \n    public matchAll: string[];\n \n    // List of OR conditions, at least one of them must be true for the rule to trigger event \n    public matchAny: string[];\n \n \n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// SessionRecord represents network statistics for a session\nexport class SessionRecord extends BaseEntity {\n \n    // Indication to the source location of the record \n    public source: string;\n \n    // Session Id \n    public sessionId: string;\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Device Id \n    public deviceId: string;\n \n    // Start window time [Epoch milliseconds Timestamp] \n    public startTime: number;\n \n    // End window time [Epoch milliseconds Timestamp] \n    public endTime: number;\n \n    // Source IP \n    public sourceIP: string;\n \n    // Source port \n    public sourcePort: number;\n \n    // Destination IP \n    public destinationIP: string;\n \n    // Destination Port \n    public destinationPort: number;\n \n    // Protocol \n    public protocol: string;\n \n    // Number of incoming packets (to the device) \n    public packetsIn: number;\n \n    // Number of outgoing packets (from the device) \n    public packetsOut: number;\n \n    // Total number of incoming bytes (to the device) \n    public bytesIn: number;\n \n    // Total number of outgoing bytes (from the device) \n    public bytesOut: number;\n \n    // List of labels \n    public labels: string[];\n \n \n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Shieldex is a security score per account level calculated periodically\nexport class Shieldex extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Total number of events per account per stream \n    public eventCount: number;\n \n    // Shield index score (1-100) \n    public indexScore: number;\n \n \n}\n\n\n","import { StreamConfig } from '../entities/StreamConfig';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Stream represents data stream configuration for group of identical IoT devices service the same purpose and sharing the same attributes (e.g. water meter, point-of-sale, ATM IP camera etc)\nexport class Stream extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream name \n    public name: string;\n \n    // Stream description \n    public description: string;\n \n    // Stream configuration \n    public config: StreamConfig;\n \n \n}\n\n\n","import { DataIngestion } from '../entities/DataIngestion';\n\n\n\n// StreamConfig is a stream configuration description\nexport class StreamConfig {\n \n    // Stream data ingestion pipeline \n    public ingest: DataIngestion;\n \n     constructor(ingest?: DataIngestion) { \n        if (ingest !== undefined) { this.ingest = ingest; }\n    }\n\n}\n\n\n","import { StringIntValue } from '../common/StringIntValue';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// UsageRecord represents network statistics\nexport class UsageRecord extends BaseEntity {\n \n    // Indication to the source location of the record \n    public source: string;\n \n    // Session Id \n    public sessionId: string;\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Device Id \n    public deviceId: string;\n \n    // Start window time [Epoch milliseconds Timestamp] \n    public startTime: number;\n \n    // End window time [Epoch milliseconds Timestamp] \n    public endTime: number;\n \n    // Source IP \n    public sourceIP: string;\n \n    // List of source ports mapped to counter (map[string]int) \n    public sourcePorts: StringIntValue[];\n \n    // Number of incoming packets (to the device) \n    public packetsIn: number;\n \n    // Number of outgoing packets (from the device) \n    public packetsOut: number;\n \n    // Total number of incoming bytes (to the device) \n    public bytesIn: number;\n \n    // Total number of outgoing bytes (from the device) \n    public bytesOut: number;\n \n    // List of inbound endpoints (mapped to counter) \n    public endpointsIn: StringIntValue[];\n \n    // Number of inbound endpoints \n    public endpointsInCount: number;\n \n    // List of outbound endpoints (mapped to counter) \n    public endpointsOut: StringIntValue[];\n \n    // Number of outbound endpoints \n    public endpointsOutCount: number;\n \n    // List of destination ports (mapped to counter) \n    public dstPorts: StringIntValue[];\n \n    // Number of destination ports \n    public dstPortsCount: number;\n \n    // Number of outgoing Ack flags (applicable only for TCP based protocols) \n    public srcAckFlags: number;\n \n    // Number of incoming Ack flags (applicable only for TCP based protocols) \n    public dstAckFlags: number;\n \n    // Number of outgoing Syn flags (applicable only for TCP based protocols) \n    public srcSynFlags: number;\n \n    // Number of incoming Syn flags (applicable only for TCP based protocols) \n    public dstSynFlags: number;\n \n    // Number of outgoing Rst flags (applicable only for TCP based protocols) \n    public srcRstFlags: number;\n \n    // Number of incoming Rst flags (applicable only for TCP based protocols) \n    public dstRstFlags: number;\n \n    // List of labels \n    public labels: string[];\n \n \n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\n\n\n\n// User represents a human / system operator that has access to the system, and can perform operations\n// User authentication is done by an external identity provider\nexport class User extends BaseEntity {\n \n    // User name \n    public name: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public type: UserTypeCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    public status: UserStatusCode;\n \n    // Default account Id \n    public defaultAccount: string;\n \n \n}\n\n\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { AccountRole } from '../common/AccountRole';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// UserMembership model include user data with a specific account membership\nexport class UserMembership extends BaseEntity {\n \n    // User name \n    public name: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public type: UserTypeCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    public status: UserStatusCode;\n \n    // Default account Id \n    public defaultAccount: string;\n \n    // User role in the account \n    public accountRole: AccountRole;\n \n \n}\n\n\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { AccountRole } from '../common/AccountRole';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// UserMemberships model include user data and all its accounts memberships\nexport class UserMemberships extends BaseEntity {\n \n    // User name \n    public name: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public type: UserTypeCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    public status: UserStatusCode;\n \n    // Default account Id \n    public defaultAccount: string;\n \n    // List of user roles in all accounts \n    public accountRoles: AccountRole[];\n \n \n}\n\n\n","\n// Account status code\nexport enum AccountStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Active account [1] \n    ACTIVE = 1,\n \n    // Suspended (non-active) account [2] \n    SUSPENDED = 2,\n \n    // Deleted account [3] \n    DELETED = 3,\n \n}\n\n// Return list of AccountStatusCode values and their display names\nexport function GetAccountStatusCodes() : Map<AccountStatusCode, string> {\n\n    let result = new Map<AccountStatusCode, string>();\n\n    \n    result.set(AccountStatusCode.UNDEFINED, 'Undefined');\n    \n    result.set(AccountStatusCode.ACTIVE, 'Active');\n    \n    result.set(AccountStatusCode.SUSPENDED, 'Suspended');\n    \n    result.set(AccountStatusCode.DELETED, 'Deleted');\n    \n\n    return result;\n}","\n// Account type code\nexport enum AccountTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Demo account for internal use [1] \n    DEMO = 1,\n \n    // Trial account for pilots [2] \n    TRIAL = 2,\n \n    // Active account for partner [3] \n    PARTNER = 3,\n \n    // Active account for paying customers [4] \n    CUSTOMER = 4,\n \n}\n\n// Return list of AccountTypeCode values and their display names\nexport function GetAccountTypeCodes() : Map<AccountTypeCode, string> {\n\n    let result = new Map<AccountTypeCode, string>();\n\n    \n    result.set(AccountTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(AccountTypeCode.DEMO, 'Demo');\n    \n    result.set(AccountTypeCode.TRIAL, 'Trial');\n    \n    result.set(AccountTypeCode.PARTNER, 'Partner');\n    \n    result.set(AccountTypeCode.CUSTOMER, 'Customer');\n    \n\n    return result;\n}","\n// Device action code\nexport enum DeviceActionCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Redirect device traffic [1] \n    REDIRECT = 1,\n \n    // Block device [2] \n    BLOCK = 2,\n \n    // Throttle device traffic [3] \n    THROTTLE = 3,\n \n}\n\n// Return list of DeviceActionCode values and their display names\nexport function GetDeviceActionCodes() : Map<DeviceActionCode, string> {\n\n    let result = new Map<DeviceActionCode, string>();\n\n    \n    result.set(DeviceActionCode.UNDEFINED, 'Undefined');\n    \n    result.set(DeviceActionCode.REDIRECT, 'Redirect');\n    \n    result.set(DeviceActionCode.BLOCK, 'Block');\n    \n    result.set(DeviceActionCode.THROTTLE, 'Throttle');\n    \n\n    return result;\n}","\n// Device status code\nexport enum DeviceStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Device is registered and pending verification [1] \n    PENDING = 1,\n \n    // Active device in the system [2] \n    ACTIVE = 2,\n \n    // Inactive device [3] \n    INACTIVE = 3,\n \n    // Blocked device [4] \n    BLOCKED = 4,\n \n}\n\n// Return list of DeviceStatusCode values and their display names\nexport function GetDeviceStatusCodes() : Map<DeviceStatusCode, string> {\n\n    let result = new Map<DeviceStatusCode, string>();\n\n    \n    result.set(DeviceStatusCode.UNDEFINED, 'Undefined');\n    \n    result.set(DeviceStatusCode.PENDING, 'Pending');\n    \n    result.set(DeviceStatusCode.ACTIVE, 'Active');\n    \n    result.set(DeviceStatusCode.INACTIVE, 'Inactive');\n    \n    result.set(DeviceStatusCode.BLOCKED, 'Blocked');\n    \n\n    return result;\n}","\n// Device type code\nexport enum DeviceTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Industrial Controller [1] \n    CONTROLLER = 1,\n \n    // General smart meter [2] \n    METER = 2,\n \n    // General sensor [3] \n    SENSOR = 3,\n \n    // General camera [4] \n    CAMERA = 4,\n \n    // Point of sale [5] \n    POS = 5,\n \n    // Pump [6] \n    PUMP = 6,\n \n    // EV charging station [7] \n    CHARGING_STATION = 7,\n \n    // Smart lightning [8] \n    LIGHTNING = 8,\n \n    // Temperature sensor [9] \n    TEMPERATURE_SENSOR = 9,\n \n    // Air Quality sensor [10] \n    AIR_QUALITY_SENSOR = 10,\n \n    // Valve [11] \n    VALVE = 11,\n \n    // Gateway [12] \n    GATEWAY = 12,\n \n}\n\n// Return list of DeviceTypeCode values and their display names\nexport function GetDeviceTypeCodes() : Map<DeviceTypeCode, string> {\n\n    let result = new Map<DeviceTypeCode, string>();\n\n    \n    result.set(DeviceTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(DeviceTypeCode.CONTROLLER, 'Controller');\n    \n    result.set(DeviceTypeCode.METER, 'Meter');\n    \n    result.set(DeviceTypeCode.SENSOR, 'Sensor');\n    \n    result.set(DeviceTypeCode.CAMERA, 'Camera');\n    \n    result.set(DeviceTypeCode.POS, 'Pos');\n    \n    result.set(DeviceTypeCode.PUMP, 'Pump');\n    \n    result.set(DeviceTypeCode.CHARGING_STATION, 'Charging Station');\n    \n    result.set(DeviceTypeCode.LIGHTNING, 'Lightning');\n    \n    result.set(DeviceTypeCode.TEMPERATURE_SENSOR, 'Temperature Sensor');\n    \n    result.set(DeviceTypeCode.AIR_QUALITY_SENSOR, 'Air Quality Sensor');\n    \n    result.set(DeviceTypeCode.VALVE, 'Valve');\n    \n    result.set(DeviceTypeCode.GATEWAY, 'Gateway');\n    \n\n    return result;\n}","\n// Event category code\nexport enum EventCategoryCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Cyber-Security event [1] \n    SECURITY = 1,\n \n    // Operational event [2] \n    OPERATIONS = 2,\n \n}\n\n// Return list of EventCategoryCode values and their display names\nexport function GetEventCategoryCodes() : Map<EventCategoryCode, string> {\n\n    let result = new Map<EventCategoryCode, string>();\n\n    \n    result.set(EventCategoryCode.UNDEFINED, 'Undefined');\n    \n    result.set(EventCategoryCode.SECURITY, 'Security');\n    \n    result.set(EventCategoryCode.OPERATIONS, 'Operations');\n    \n\n    return result;\n}","\n// Event workflow status code\nexport enum EventStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // New event [1] \n    NEW = 1,\n \n    // Open event, handled by the operator [2] \n    OPEN = 2,\n \n    // Closed event (tagged as True event) [3] \n    CLOSED_TRUE = 3,\n \n    // Closed event (tagged as False event) [4] \n    CLOSED_FALSE = 4,\n \n}\n\n// Return list of EventStatusCode values and their display names\nexport function GetEventStatusCodes() : Map<EventStatusCode, string> {\n\n    let result = new Map<EventStatusCode, string>();\n\n    \n    result.set(EventStatusCode.UNDEFINED, 'Undefined');\n    \n    result.set(EventStatusCode.NEW, 'New');\n    \n    result.set(EventStatusCode.OPEN, 'Open');\n    \n    result.set(EventStatusCode.CLOSED_TRUE, 'Closed True');\n    \n    result.set(EventStatusCode.CLOSED_FALSE, 'Closed False');\n    \n\n    return result;\n}","\n// Event type code\nexport enum EventTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Device Takeover [1] \n    DEVICE_TAKEOVER = 1,\n \n    // DDoS [2] \n    DDOS = 2,\n \n    // Unknown Malware [3] \n    UNKNOWN_MALWARE = 3,\n \n    // Man-in-the-Middle [4] \n    MAN_IN_THE_MIDDLE = 4,\n \n    // Data Theft [5] \n    DATA_THEFT = 5,\n \n    // Port Scanning [6] \n    PORT_SCANNING = 6,\n \n    // Abnormal Download [7] \n    ABNORMAL_DOWNLOAD = 7,\n \n    // Abnormal Incoming Connection [8] \n    ABNORMAL_INCOMING_CONNECTION = 8,\n \n    // Unsuccessful Connection Attempts [9] \n    UNSUCCESSFUL_CONNECTION_ATTEMPTS = 9,\n \n    // High Volume Transmit [10] \n    HIGH_VOLUME_TRANSIT = 10,\n \n    // Device Level Attack [11] \n    DEVICE_LEVEL_ATTACK = 11,\n \n    // Replay Attack [12] \n    REPLAY_ATTACK = 12,\n \n    // Attempted Device Takeover [13] \n    DEVICE_TAKEOVER_ATTEMPT = 13,\n \n    // Unknown Operation' [14] \n    UNKNOWN_OPERATION = 14,\n \n    // Crypto Mining [15] \n    CRYPTO_MINING = 15,\n \n    // Suspicious IP [16] \n    SUSPICIOUS_IP = 16,\n \n}\n\n// Return list of EventTypeCode values and their display names\nexport function GetEventTypeCodes() : Map<EventTypeCode, string> {\n\n    let result = new Map<EventTypeCode, string>();\n\n    \n    result.set(EventTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(EventTypeCode.DEVICE_TAKEOVER, 'Device Takeover');\n    \n    result.set(EventTypeCode.DDOS, 'Ddos');\n    \n    result.set(EventTypeCode.UNKNOWN_MALWARE, 'Unknown Malware');\n    \n    result.set(EventTypeCode.MAN_IN_THE_MIDDLE, 'Man In The Middle');\n    \n    result.set(EventTypeCode.DATA_THEFT, 'Data Theft');\n    \n    result.set(EventTypeCode.PORT_SCANNING, 'Port Scanning');\n    \n    result.set(EventTypeCode.ABNORMAL_DOWNLOAD, 'Abnormal Download');\n    \n    result.set(EventTypeCode.ABNORMAL_INCOMING_CONNECTION, 'Abnormal Incoming Connection');\n    \n    result.set(EventTypeCode.UNSUCCESSFUL_CONNECTION_ATTEMPTS, 'Unsuccessful Connection Attempts');\n    \n    result.set(EventTypeCode.HIGH_VOLUME_TRANSIT, 'High Volume Transit');\n    \n    result.set(EventTypeCode.DEVICE_LEVEL_ATTACK, 'Device Level Attack');\n    \n    result.set(EventTypeCode.REPLAY_ATTACK, 'Replay Attack');\n    \n    result.set(EventTypeCode.DEVICE_TAKEOVER_ATTEMPT, 'Device Takeover Attempt');\n    \n    result.set(EventTypeCode.UNKNOWN_OPERATION, 'Unknown Operation');\n    \n    result.set(EventTypeCode.CRYPTO_MINING, 'Crypto Mining');\n    \n    result.set(EventTypeCode.SUSPICIOUS_IP, 'Suspicious Ip');\n    \n\n    return result;\n}","\n// Integration type code\nexport enum IntegrationTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // General HTTP(S) based integration [1] \n    HTTP = 1,\n \n    // General SMTP based integration [2] \n    SMTP = 2,\n \n    // Internal email service integration [3] \n    EMAIL = 3,\n \n    // Internal SMS service integration  [4] \n    SMS = 4,\n \n}\n\n// Return list of IntegrationTypeCode values and their display names\nexport function GetIntegrationTypeCodes() : Map<IntegrationTypeCode, string> {\n\n    let result = new Map<IntegrationTypeCode, string>();\n\n    \n    result.set(IntegrationTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(IntegrationTypeCode.HTTP, 'Http');\n    \n    result.set(IntegrationTypeCode.SMTP, 'Smtp');\n    \n    result.set(IntegrationTypeCode.EMAIL, 'Email');\n    \n    result.set(IntegrationTypeCode.SMS, 'Sms');\n    \n\n    return result;\n}","\n// Member role code (represent role of user in the account)\nexport enum MemberRoleCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Account administrator can perform all operations [1] \n    ADMIN = 1,\n \n    // Account operator can perform operations on events only [2] \n    OPERATOR = 2,\n \n    // Viewer has read-only permissions [3] \n    VIEWER = 3,\n \n}\n\n// Return list of MemberRoleCode values and their display names\nexport function GetMemberRoleCodes() : Map<MemberRoleCode, string> {\n\n    let result = new Map<MemberRoleCode, string>();\n\n    \n    result.set(MemberRoleCode.UNDEFINED, 'Undefined');\n    \n    result.set(MemberRoleCode.ADMIN, 'Admin');\n    \n    result.set(MemberRoleCode.OPERATOR, 'Operator');\n    \n    result.set(MemberRoleCode.VIEWER, 'Viewer');\n    \n\n    return result;\n}","\n// RuleTypeCode represents the sources (engines) of rules\nexport enum RuleTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Suspicious IP based on IP reputation engine [1] \n    SUSPICIOUS_IP = 1,\n \n    // Static rule based on deterministic rule engine [2] \n    STATIC = 2,\n \n    // Rule based on anomaly detection and classification [3] \n    ANOMALY = 3,\n \n}\n\n// Return list of RuleTypeCode values and their display names\nexport function GetRuleTypeCodes() : Map<RuleTypeCode, string> {\n\n    let result = new Map<RuleTypeCode, string>();\n\n    \n    result.set(RuleTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(RuleTypeCode.SUSPICIOUS_IP, 'Suspicious Ip');\n    \n    result.set(RuleTypeCode.STATIC, 'Static');\n    \n    result.set(RuleTypeCode.ANOMALY, 'Anomaly');\n    \n\n    return result;\n}","\n// Severity type (level) code\nexport enum SeverityTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Low severity [1] \n    LOW = 1,\n \n    // Medium severity [2] \n    MEDIUM = 2,\n \n    // High severity [3] \n    HIGH = 3,\n \n    // Critical severity [4] \n    CRITICAL = 4,\n \n}\n\n// Return list of SeverityTypeCode values and their display names\nexport function GetSeverityTypeCodes() : Map<SeverityTypeCode, string> {\n\n    let result = new Map<SeverityTypeCode, string>();\n\n    \n    result.set(SeverityTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(SeverityTypeCode.LOW, 'Low');\n    \n    result.set(SeverityTypeCode.MEDIUM, 'Medium');\n    \n    result.set(SeverityTypeCode.HIGH, 'High');\n    \n    result.set(SeverityTypeCode.CRITICAL, 'Critical');\n    \n\n    return result;\n}","\n// User status code\nexport enum UserStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // User is registered and pending verification [1] \n    PENDING = 1,\n \n    // Active user in the system [2] \n    ACTIVE = 2,\n \n    // Blocked user (only account system can unblock the user) [4] \n    BLOCKED = 3,\n \n    // Suspended user (about to be deleted) [8] \n    SUSPENDED = 4,\n \n}\n\n// Return list of UserStatusCode values and their display names\nexport function GetUserStatusCodes() : Map<UserStatusCode, string> {\n\n    let result = new Map<UserStatusCode, string>();\n\n    \n    result.set(UserStatusCode.UNDEFINED, 'Undefined');\n    \n    result.set(UserStatusCode.PENDING, 'Pending');\n    \n    result.set(UserStatusCode.ACTIVE, 'Active');\n    \n    result.set(UserStatusCode.BLOCKED, 'Blocked');\n    \n    result.set(UserStatusCode.SUSPENDED, 'Suspended');\n    \n\n    return result;\n}","\n// User type code\nexport enum UserTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // System administrator has access to all accounts and permissions to perform all actions [1] \n    SYSADMIN = 1,\n \n    // Support user has view permissions only for all accounts that enabled option Enable Support [2] \n    SUPPORT = 2,\n \n    // Account user - has access to specific accounts with role based access control [4] \n    USER = 4,\n \n    // Account service - to be used by other systems to perform actions using the API (can't login as a user to the portal)' [5]` \n    SERVICE = 5,\n \n}\n\n// Return list of UserTypeCode values and their display names\nexport function GetUserTypeCodes() : Map<UserTypeCode, string> {\n\n    let result = new Map<UserTypeCode, string>();\n\n    \n    result.set(UserTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(UserTypeCode.SYSADMIN, 'Sysadmin');\n    \n    result.set(UserTypeCode.SUPPORT, 'Support');\n    \n    result.set(UserTypeCode.USER, 'User');\n    \n    result.set(UserTypeCode.SERVICE, 'Service');\n    \n\n    return result;\n}","\n// BaseRestResponse is a common structure for all response types\nexport class BaseRestResponse {\n\n    // Error code (0 for success)\n    public code: number = 0;\n\n    // Error message\n    public error: string = '';\n}","import { BaseRestResponse } from './BaseRestResponse'\n\n// ActionResponse message is returned for any action on entity with no return data (e.d. delete)\nexport class ActionResponse extends BaseRestResponse {\n\n    // Entity key\n    public key: string = '';\n\n    // Additional data\n    public data: string = '';\n}\n\n\n","import { BaseRestResponse } from './BaseRestResponse'\n\n// EntitiesResponse message is returned for any action returning multiple entities\nexport class EntityResponse<T> extends BaseRestResponse {\n\n    // Current page (Bulk) number\n    public page: number = 0;\n\n    // Size of page (items in bulk)\n    public size: number = 0;\n\n    // Total number of pages\n    public pages: number = 0;\n\n    // Total number of items in the query\n    public total: number = 0;\n\n    // List of entities\n    public entity: T;\n}\n","import { BaseRestResponse } from './BaseRestResponse'\n\n// EntitiesResponse message is returned for any action returning multiple entities\nexport class EntitiesResponse<T> extends BaseRestResponse {\n\n    // Current page (Bulk) number\n    public page: number = 0;\n\n    // Size of page (items in bulk)\n    public size: number = 0;\n\n    // Total number of pages\n    public pages: number = 0;\n\n    // Total number of items in the query\n    public total: number = 0;\n\n    // List of entities\n    public list: T[] = [];\n\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\n\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type':  'application/json',\n    'Cache-Control': 'no-cache, no-store',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, X-API-KEY, X-ACCESS-TOKEN, X-TIMEZONE, accept, origin, Cache-Control, X-Requested-With, Authorization, Content-Disposition, Content-Filename',\n    'Access-Control-Exposed-Headers': 'X-API-KEY, X-ACCESS-TOKEN, X-TIMEZONE, Content-Disposition, Content-Filename',\n  })\n};\n\n\n// Utility class for all REST services with common functions\n@Injectable()\nexport class RestUtil {\n\n  // Constructor with injected authentication service\n  constructor(private http: HttpClient) { }\n\n  // Upload is HTTP POST action but the body is File object\n  upload(file: File, url: string, ...params: string[]) {\n\n    const resourceUrl = this.buildUrl(url, ...params);\n\n    const formData: FormData = new FormData();\n    formData.append('fileKey', file, file.name);\n\n    const req = new HttpRequest('POST', resourceUrl, formData, {\n      reportProgress: false,\n      responseType: 'json',\n    });\n    return this.http.request(req);\n  }\n\n  // Download is HTTP GET action but the content is blob\n  download(fileName: string, url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n\n    let downloadLink = fileName\n\n    // extract file name\n    params.forEach(p => {\n      let arr = p.split('=');\n      if (arr.length > 1) {\n        if (arr[0].toLowerCase() === 'filename') {\n          downloadLink = arr[1];\n        }\n      }\n    });\n\n    // Set content type for: json / csv / xml / pdf /xslx\n    let contentType = this.getMimeType(downloadLink);\n\n    return this.http.get(resourceUrl, {\n      responseType: 'blob',\n      reportProgress: true,\n      observe: 'events',\n      headers: new HttpHeaders({ 'Content-Type': contentType })\n    });\n  }\n\n  // Download2 is an alternative option to download\n  download2(fileName: string, url: string, ...params: string[]) {\n\n    let downloadLink = fileName\n\n    // extract file name\n    params.forEach(p => {\n      let arr = p.split('=');\n      if (arr.length > 1) {\n        if (arr[0].toLowerCase() === 'filename') {\n          downloadLink = arr[1];\n        }\n      }\n    });\n\n    let contentType = this.getMimeType(fileName);\n\n    const link = document.createElement('a');\n    link.href = this.buildUrl(url, ...params);\n    link.download = downloadLink;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n  }\n\n  // HTTP GET action\n  get<T>(url: string, ...params: string[]): Observable<T> {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http.get<T>(resourceUrl, httpOptions)\n  }\n\n  // HTTP POST action\n  post<T>(url: string, body?: string, ...params: string[]): Observable<T> {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http.post<T>(resourceUrl, body, httpOptions)\n  }\n\n  // HTTP PUT action\n  put<T>(url: string, body?: string, ...params: string[]): Observable<T> {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http.put<T>(resourceUrl, body, httpOptions)\n  }\n\n  // HTTP DELETE action\n  delete<T>(url: string, ...params: string[]): Observable<T> {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http.delete<T>(resourceUrl, httpOptions)\n  }\n\n  // Construct URL with parameters\n  private buildUrl(url: string, ...params: string[]) {\n    return (params === null) ? url : (params.length === 0) ? url : `${url}${params && params.length > 0 ? '?'+params.join('&') : ''}`;\n  }\n\n  // Return MIME type based on file extension\n  private getMimeType(fileName: string): string {\n    // Set content type for: json / csv / xml / pdf /xslx\n    let contentType = 'application/json';\n    if (fileName.toLowerCase().endsWith('csv')) {\n      contentType = 'text/csv';\n    } else if (fileName.toLowerCase().endsWith('xml')) {\n      contentType = 'text/xml';\n    } else if (fileName.toLowerCase().endsWith('pdf')) {\n      contentType = 'application/pdf';\n    } else if (fileName.toLowerCase().endsWith('xlsx')) {\n      contentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    }\n    return contentType\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class PulseConfig {\n    api: string = '';\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Device } from '../entities/Device';\nimport { DeviceTypeCode } from '../enums/DeviceTypeCode';\nimport { DeviceStatusCode } from '../enums/DeviceStatusCode';\nimport { DeviceWithEvents } from '../entities/DeviceWithEvents';\nimport { IntDistribution } from '../entities/IntDistribution';\nimport { DeviceActionCode } from '../enums/DeviceActionCode';\n\n\n\n// List of device related actions for the operator \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class DevicesService {\n\n  // URL to web api\n  private baseUrl = '/devices';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new device\n   */\n  create() {\n    return this.rest.post<EntityResponse<Device>>(`${this.baseUrl}`, '');\n  }\n\n  /**\n   * Update existing device in the system\n   */\n  update(body?: Device) {\n    return this.rest.put<EntityResponse<Device>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete device from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single device by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Device>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of devices by query\n   */\n  find(streamId?: string, search?: string, type?: DeviceTypeCode[], status?: DeviceStatusCode[], risk?: number, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (risk != null) { params.push(`risk=${risk}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Device>>(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Export list of devices by query to a file with the specified format\n   */\n  exportFormat(streamId?: string, search?: string, type?: DeviceTypeCode[], status?: DeviceStatusCode[], risk?: number, sort?: string, page?: number, size?: number, format?: string) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (risk != null) { params.push(`risk=${risk}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n    if (format != null) { params.push(`format=${format}`); }\n\n\t\treturn this.rest.download(`devices`,`${this.baseUrl}/export`, ...params);\n  }\n\n  /**\n   * Find top 10 devices by their score filter by query\n   */\n  findTop(streamId?: string, search?: string, type?: DeviceTypeCode[], status?: DeviceStatusCode[], risk?: number, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (risk != null) { params.push(`risk=${risk}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<DeviceWithEvents>>(`${this.baseUrl}/top`, ...params);\n  }\n\n  /**\n   * Find device distribution by type filtered by query\n   */\n  countByType(streamId?: string, search?: string, type?: DeviceTypeCode[], status?: DeviceStatusCode[], risk?: number, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (risk != null) { params.push(`risk=${risk}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-type`, ...params);\n  }\n\n  /**\n   * Find device distribution by status filtered by query\n   */\n  countByStatus(streamId?: string, search?: string, type?: DeviceTypeCode[], status?: DeviceStatusCode[], risk?: number, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (risk != null) { params.push(`risk=${risk}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-status`, ...params);\n  }\n\n  /**\n   * Find device distribution by action filtered by query\n   */\n  countByAction(streamId?: string, search?: string, type?: DeviceTypeCode[], status?: DeviceStatusCode[], risk?: number, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (risk != null) { params.push(`risk=${risk}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-action`, ...params);\n  }\n\n  /**\n   * Add tag to a device\n   */\n  addTag(id?: string, tag?: string) {\n    return this.rest.post<EntityResponse<Device>>(`${this.baseUrl}/${id}/tags/${tag}`, '');\n  }\n\n  /**\n   * Delete a tag from the device\n   */\n  deleteTag(id?: string, tag?: string) {\n    return this.rest.delete<EntityResponse<Device>>(`${this.baseUrl}/${id}/tags/${tag}`);\n  }\n\n  /**\n   * Apply action on a device\n   */\n  applyAction(id?: string, action?: DeviceActionCode) {\n    return this.rest.post<ActionResponse>(`${this.baseUrl}/${id}/action/${action}`, '');\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { TimeSeriesOf2D } from '../common/TimeSeriesOf2D';\nimport { TimeSeriesOfFloat } from '../common/TimeSeriesOfFloat';\nimport { Event } from '../entities/Event';\nimport { EventTypeCode } from '../enums/EventTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { EventWithDevice } from '../entities/EventWithDevice';\nimport { IntDistribution } from '../entities/IntDistribution';\nimport { EventStatusCode } from '../enums/EventStatusCode';\n\n\n\n// List of events related actions for the operator \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class EventsService {\n\n  // URL to web api\n  private baseUrl = '/events';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get single event by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Event>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of events by query\n   */\n  find(streamId?: string, deviceId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Event>>(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Export list of events by query to a file with the specified format\n   */\n  exportFormat(streamId?: string, deviceId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], sort?: string, page?: number, size?: number, format?: string) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n    if (format != null) { params.push(`format=${format}`); }\n\n\t\treturn this.rest.download(`events`,`${this.baseUrl}/export`, ...params);\n  }\n\n  /**\n   * Find top 10 events by their severity filter by query\n   */\n  getTop(streamId?: string, deviceId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<EventWithDevice>>(`${this.baseUrl}/top`, ...params);\n  }\n\n  /**\n   * Find events distribution by type filtered by query\n   */\n  countByType(streamId?: string, deviceId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-type`, ...params);\n  }\n\n  /**\n   * Find events distribution by status filtered by query\n   */\n  countByStatus(streamId?: string, deviceId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-status`, ...params);\n  }\n\n  /**\n   * Find events distribution by severity filtered by query\n   */\n  countBySeverity(streamId?: string, deviceId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-severity`, ...params);\n  }\n\n  /**\n   * Find events distribution by rule filtered by query\n   */\n  countByRule(streamId?: string, deviceId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-rule`, ...params);\n  }\n\n  /**\n   * Find events distribution by category filtered by query\n   */\n  countByCategory(streamId?: string, deviceId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-category`, ...params);\n  }\n\n  /**\n   * Set event status\n   */\n  applyAction(id?: string, status?: EventStatusCode) {\n    return this.rest.post<ActionResponse>(`${this.baseUrl}/${id}/status/${status}`, '');\n  }\n\n  /**\n   * Get current shieldex value as ActionResponse, the Key contains the shield index and the data includes the trend\n   */\n  getShieldex() {\n    return this.rest.get<ActionResponse>(`${this.baseUrl}/shieldex`);\n  }\n\n  /**\n   * Get histogram of events over time by dimension (type | severity | status | ruleType | category)\n   */\n  eventsTimeline(streamId?: string, deviceId?: string, dimension?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (dimension != null) { params.push(`dimension=${dimension}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<TimeSeriesOf2D>>(`${this.baseUrl}/timeline`, ...params);\n  }\n\n  /**\n   * Get histogram of shieldex values over time\n   */\n  shieldexTimeline(streamId?: string, from?: number, to?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get<EntityResponse<TimeSeriesOfFloat>>(`${this.baseUrl}/shieldex/timeline`, ...params);\n  }\n\n  /**\n   * Export event source file\n   */\n  exportSource(id?: string) {\n    return this.rest.download(`events`,`${this.baseUrl}/${id}/export`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Account } from '../entities/Account';\nimport { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\n\n\n\n// List of account related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysAccountsService {\n\n  // URL to web api\n  private baseUrl = '/sys/accounts';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new account\n   */\n  create(body?: Account) {\n    return this.rest.post<EntityResponse<Account>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing account in the system\n   */\n  update(body?: Account) {\n    return this.rest.put<EntityResponse<Account>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete account from the system and all its related content\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single account by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Account>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of accounts by query\n   */\n  find(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Account>>(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Member } from '../entities/Member';\n\n\n\n// List of members related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysMembersService {\n\n  // URL to web api\n  private baseUrl = '/sys/members';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new member\n   */\n  create(body?: Member) {\n    return this.rest.post<EntityResponse<Member>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing member in the system\n   */\n  update(body?: Member) {\n    return this.rest.put<EntityResponse<Member>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete member from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single member by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Member>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of members by query\n   */\n  find() {\n    return this.rest.get<EntitiesResponse<Member>>(`${this.baseUrl}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { RuleTemplate } from '../entities/RuleTemplate';\n\n\n\n// List of rule templates related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysRuleTemplatesService {\n\n  // URL to web api\n  private baseUrl = '/sys/rule-templates';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new rule template\n   */\n  create(body?: RuleTemplate) {\n    return this.rest.post<EntityResponse<RuleTemplate>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing rule template\n   */\n  update(body?: RuleTemplate) {\n    return this.rest.put<EntityResponse<RuleTemplate>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete a rule template from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single rule template by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<RuleTemplate>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of rule templates by query\n   */\n  find(search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<RuleTemplate>>(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Rule } from '../entities/Rule';\n\n\n\n// List of rules related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysRulesService {\n\n  // URL to web api\n  private baseUrl = '/sys/rules';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new rule\n   */\n  create(body?: Rule) {\n    return this.rest.post<EntityResponse<Rule>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing rule in the system\n   */\n  update(body?: Rule) {\n    return this.rest.put<EntityResponse<Rule>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete a rule from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single rule by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Rule>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of rules by query\n   */\n  find(accountId?: string, streamId?: string, search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Rule>>(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Stream } from '../entities/Stream';\n\n\n\n// List of stream related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysStreamsService {\n\n  // URL to web api\n  private baseUrl = '/sys/streams';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new stream\n   */\n  create(body?: Stream) {\n    return this.rest.post<EntityResponse<Stream>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing stream in the system\n   */\n  update(body?: Stream) {\n    return this.rest.put<EntityResponse<Stream>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete a stream from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single stream by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Stream>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of streams by query\n   */\n  find(accountId?: string, search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Stream>>(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { UserMemberships } from '../entities/UserMemberships';\nimport { User } from '../entities/User';\nimport { UserTypeCode } from '../enums/UserTypeCode';\n\n\n\n// List of users related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysUsersService {\n\n  // URL to web api\n  private baseUrl = '/sys/users';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new user\n   */\n  create(body?: User) {\n    return this.rest.post<EntityResponse<User>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing user in the system\n   */\n  update(body?: User) {\n    return this.rest.put<EntityResponse<User>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete a user from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single user by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<User>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of users by query\n   */\n  find(search?: string, type?: UserTypeCode[], status?: UserStatusCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<User>>(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Create new user with all its accounts memberships\n   */\n  createMembership(body?: UserMemberships) {\n    return this.rest.post<EntityResponse<UserMemberships>>(`${this.baseUrl}/memberships`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Rule } from '../entities/Rule';\nimport { Integration } from '../entities/Integration';\n\n\n\n// List of integrations related actions for the operator \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class UsrIntegrationsService {\n\n  // URL to web api\n  private baseUrl = '/integrations';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new integration\n   */\n  create(body?: Rule) {\n    return this.rest.post<EntityResponse<Integration>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing integration\n   */\n  update(body?: Rule) {\n    return this.rest.put<EntityResponse<Integration>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete integration from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single integration by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Integration>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of integrations by query\n   */\n  find(accountId?: string, streamId?: string, search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Integration>>(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { LoginParams } from '../common/LoginParams';\nimport { Account } from '../entities/Account';\nimport { UserMemberships } from '../entities/UserMemberships';\n\n\n\n// List of user related actions \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class UserService {\n\n  // URL to web api\n  private baseUrl = '/user';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Authorize user, verify user exists in the system (user was already authenticated by OAuth provider)\n   * The response includes access token valid for 20 minutes. The client side should renew the token before expiration using refresh-token method\n   */\n  authorize(body?: LoginParams) {\n    return this.rest.post<ActionResponse>(`${this.baseUrl}/authorize`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Refresh token (set new expiration time) and associate with new account if required\n   * The response includes the account details and the newly refreshed token in the HTTP header X-ACCESS-TOKEN\n   */\n  setAccount(id?: string) {\n    return this.rest.post<EntityResponse<Account>>(`${this.baseUrl}/set-account/${id}`, '');\n  }\n\n  /**\n   * Get the user's current account details\n   */\n  getAccount() {\n    return this.rest.get<EntityResponse<Account>>(`${this.baseUrl}/get-account`);\n  }\n\n  /**\n   * Get all the user memberships (all accounts that the current user has access to)\n   */\n  getMemberships() {\n    return this.rest.get<EntityResponse<UserMemberships>>(`${this.baseUrl}/memberships`);\n  }\n\n}\n","import { SysAccountsService } from './sysAccountsService';\nimport { SysMembersService } from './sysMembersService';\nimport { SysRuleTemplatesService } from './sysRuleTemplatesService';\nimport { SysRulesService } from './sysRulesService';\nimport { SysStreamsService } from './sysStreamsService';\nimport { SysUsersService } from './sysUsersService';\nimport { UsrIntegrationsService } from './usrIntegrationsService';\nimport { UserService } from './userService';\nimport { DevicesService } from './devicesService';\nimport { EventsService } from './eventsService';\n\nexport const Services = [\n    SysAccountsService,\n    SysMembersService,\n    SysRuleTemplatesService,\n    SysRulesService,\n    SysStreamsService,\n    SysUsersService,\n    UsrIntegrationsService,\n    UserService,\n    DevicesService,\n    EventsService,\n    \n]","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Services } from './lib/services/services.export';\nimport { RestUtil } from './utils/rest-util';\nimport { HttpClientModule } from '@angular/common/http';\nimport { PulseConfig } from './config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule]\n})\nexport class PulseLibModule {\n  static forRoot(config: PulseConfig): ModuleWithProviders<PulseLibModule> {\n    return {\n      ngModule: PulseLibModule,\n      providers: [\n        { provide: 'config', useValue: config },\n        RestUtil,\n        ...Services\n      ]\n    };\n  }\n}\n","/* Public API Surface of ng-pulse-lib */\nexport * from './lib';\nexport * from './pulse-lib.module';\nexport * from './utils';\nexport * from './config';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.RestUtil"],"mappings":"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"}