// DataIngestion is the ingestion pipeline configuration
export class DataIngestion {
    constructor(inputURI, archiveURI, inputFilesExt, subNets, usageTimeWindowSec, sessionTimeWindowSec, schedule, defaultDeviceType, isStaticIPs) {
        if (inputURI !== undefined) {
            this.inputURI = inputURI;
        }
        if (archiveURI !== undefined) {
            this.archiveURI = archiveURI;
        }
        if (inputFilesExt !== undefined) {
            this.inputFilesExt = inputFilesExt;
        }
        if (subNets !== undefined) {
            this.subNets = subNets;
        }
        if (usageTimeWindowSec !== undefined) {
            this.usageTimeWindowSec = usageTimeWindowSec;
        }
        if (sessionTimeWindowSec !== undefined) {
            this.sessionTimeWindowSec = sessionTimeWindowSec;
        }
        if (schedule !== undefined) {
            this.schedule = schedule;
        }
        if (defaultDeviceType !== undefined) {
            this.defaultDeviceType = defaultDeviceType;
        }
        if (isStaticIPs !== undefined) {
            this.isStaticIPs = isStaticIPs;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YUluZ2VzdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXB1bHNlLWxpYi9zcmMvbGliL2VudGl0aWVzL0RhdGFJbmdlc3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsd0RBQXdEO0FBQ3hELE1BQU0sT0FBTyxhQUFhO0lBNkJyQixZQUFZLFFBQWlCLEVBQUUsVUFBbUIsRUFBRSxhQUF3QixFQUFFLE9BQWtCLEVBQUUsa0JBQTJCLEVBQUUsb0JBQTZCLEVBQUUsUUFBaUIsRUFBRSxpQkFBa0MsRUFBRSxXQUFxQjtRQUN2TyxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztTQUFFO1FBQ3pELElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1NBQUU7UUFDL0QsSUFBSSxhQUFhLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7U0FBRTtRQUN4RSxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztTQUFFO1FBQ3RELElBQUksa0JBQWtCLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO1NBQUU7UUFDdkYsSUFBSSxvQkFBb0IsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsb0JBQW9CLENBQUM7U0FBRTtRQUM3RixJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztTQUFFO1FBQ3pELElBQUksaUJBQWlCLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO1NBQUU7UUFDcEYsSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7U0FBRTtJQUN0RSxDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZXZpY2VUeXBlQ29kZSB9IGZyb20gJy4uL2VudW1zL0RldmljZVR5cGVDb2RlJztcblxuXG5cbi8vIERhdGFJbmdlc3Rpb24gaXMgdGhlIGluZ2VzdGlvbiBwaXBlbGluZSBjb25maWd1cmF0aW9uXG5leHBvcnQgY2xhc3MgRGF0YUluZ2VzdGlvbiB7XG4gXG4gICAgLy8gSW5wdXQgZmlsZXMgbG9jYXRpb25zIFxuICAgIHB1YmxpYyBpbnB1dFVSSTogc3RyaW5nO1xuIFxuICAgIC8vIFdoZXJlIHRvIGFyY2hpdmUgcHJvY2Vzc2VkIGZpbGVzIFxuICAgIHB1YmxpYyBhcmNoaXZlVVJJOiBzdHJpbmc7XG4gXG4gICAgLy8gSW5wdXQgZmlsZXMgZXh0ZW5zaW9ucyAoZmlsdGVyIGJ5IGV4dGVuc2lvbnMpIC0gaWdub3JlIGlmIGVtcHR5IFxuICAgIHB1YmxpYyBpbnB1dEZpbGVzRXh0OiBzdHJpbmdbXTtcbiBcbiAgICAvLyBMaXN0IG9mIElvVCBkZXZpY2VzIHN1Ym5ldHMgLSBpZ25vcmUgaWYgZW1wdHkgXG4gICAgcHVibGljIHN1Yk5ldHM6IHN0cmluZ1tdO1xuIFxuICAgIC8vIFVzYWdlIHRpbWUgd2luZG93IGZvciBhZ2dyZWdhdGlvbiAoaW4gc2Vjb25kcykgXG4gICAgcHVibGljIHVzYWdlVGltZVdpbmRvd1NlYzogbnVtYmVyO1xuIFxuICAgIC8vIFNlc3Npb24gdGltZSB3aW5kb3cgZm9yIGFnZ3JlZ2F0aW9uIChpbiBzZWNvbmRzKSBcbiAgICBwdWJsaWMgc2Vzc2lvblRpbWVXaW5kb3dTZWM6IG51bWJlcjtcbiBcbiAgICAvLyBDcm9uIHNjaGVkdWxlIHRlbXBsYXRlIGluIDYgc2VnbWVudCBmb3JtYXQgKHNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3JvbikgLSBsZWF2ZSBlbXB0eSBmb3IgaW1tZWRpYXRlIHByb2Nlc3NpbmcgXG4gICAgcHVibGljIHNjaGVkdWxlOiBzdHJpbmc7XG4gXG4gICAgLy8gRGVmYXVsdCBkZXZpY2UgdHlwZTogVU5ERUZJTkVEIHwgT1RIRVIgfCBDT05UUk9MTEVSIHwgTUVURVIgfCBTRU5TT1IgLi4uIFxuICAgIHB1YmxpYyBkZWZhdWx0RGV2aWNlVHlwZTogRGV2aWNlVHlwZUNvZGU7XG4gXG4gICAgLy8gRmxhZyB0byBpbmRpY2F0ZSBpZiB0aGlzIHN0cmVhbSBkYXRhIGNvbnRhaW5zIHN0YXRpYyBJUHMgXG4gICAgcHVibGljIGlzU3RhdGljSVBzOiBib29sZWFuO1xuIFxuICAgICBjb25zdHJ1Y3RvcihpbnB1dFVSST86IHN0cmluZywgYXJjaGl2ZVVSST86IHN0cmluZywgaW5wdXRGaWxlc0V4dD86IHN0cmluZ1tdLCBzdWJOZXRzPzogc3RyaW5nW10sIHVzYWdlVGltZVdpbmRvd1NlYz86IG51bWJlciwgc2Vzc2lvblRpbWVXaW5kb3dTZWM/OiBudW1iZXIsIHNjaGVkdWxlPzogc3RyaW5nLCBkZWZhdWx0RGV2aWNlVHlwZT86IERldmljZVR5cGVDb2RlLCBpc1N0YXRpY0lQcz86IGJvb2xlYW4pIHsgXG4gICAgICAgIGlmIChpbnB1dFVSSSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuaW5wdXRVUkkgPSBpbnB1dFVSSTsgfVxuICAgICAgICBpZiAoYXJjaGl2ZVVSSSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuYXJjaGl2ZVVSSSA9IGFyY2hpdmVVUkk7IH1cbiAgICAgICAgaWYgKGlucHV0RmlsZXNFeHQgIT09IHVuZGVmaW5lZCkgeyB0aGlzLmlucHV0RmlsZXNFeHQgPSBpbnB1dEZpbGVzRXh0OyB9XG4gICAgICAgIGlmIChzdWJOZXRzICE9PSB1bmRlZmluZWQpIHsgdGhpcy5zdWJOZXRzID0gc3ViTmV0czsgfVxuICAgICAgICBpZiAodXNhZ2VUaW1lV2luZG93U2VjICE9PSB1bmRlZmluZWQpIHsgdGhpcy51c2FnZVRpbWVXaW5kb3dTZWMgPSB1c2FnZVRpbWVXaW5kb3dTZWM7IH1cbiAgICAgICAgaWYgKHNlc3Npb25UaW1lV2luZG93U2VjICE9PSB1bmRlZmluZWQpIHsgdGhpcy5zZXNzaW9uVGltZVdpbmRvd1NlYyA9IHNlc3Npb25UaW1lV2luZG93U2VjOyB9XG4gICAgICAgIGlmIChzY2hlZHVsZSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuc2NoZWR1bGUgPSBzY2hlZHVsZTsgfVxuICAgICAgICBpZiAoZGVmYXVsdERldmljZVR5cGUgIT09IHVuZGVmaW5lZCkgeyB0aGlzLmRlZmF1bHREZXZpY2VUeXBlID0gZGVmYXVsdERldmljZVR5cGU7IH1cbiAgICAgICAgaWYgKGlzU3RhdGljSVBzICE9PSB1bmRlZmluZWQpIHsgdGhpcy5pc1N0YXRpY0lQcyA9IGlzU3RhdGljSVBzOyB9XG4gICAgfVxuXG59XG5cblxuIl19