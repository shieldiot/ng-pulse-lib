// DataIngestion is the ingestion pipeline configuration
export class DataIngestion {
    constructor(inputURI, archiveURI, inputFilesExt, subNets, usageTimeWindowSec, sessionTimeWindowSec, schedule, defaultDeviceType, deviceCreationPolicy) {
        if (inputURI !== undefined) {
            this.inputURI = inputURI;
        }
        if (archiveURI !== undefined) {
            this.archiveURI = archiveURI;
        }
        if (inputFilesExt !== undefined) {
            this.inputFilesExt = inputFilesExt;
        }
        if (subNets !== undefined) {
            this.subNets = subNets;
        }
        if (usageTimeWindowSec !== undefined) {
            this.usageTimeWindowSec = usageTimeWindowSec;
        }
        if (sessionTimeWindowSec !== undefined) {
            this.sessionTimeWindowSec = sessionTimeWindowSec;
        }
        if (schedule !== undefined) {
            this.schedule = schedule;
        }
        if (defaultDeviceType !== undefined) {
            this.defaultDeviceType = defaultDeviceType;
        }
        if (deviceCreationPolicy !== undefined) {
            this.deviceCreationPolicy = deviceCreationPolicy;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YUluZ2VzdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXB1bHNlLWxpYi9zcmMvbGliL2VudGl0aWVzL0RhdGFJbmdlc3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0Esd0RBQXdEO0FBQ3hELE1BQU0sT0FBTyxhQUFhO0lBNkJyQixZQUFZLFFBQWlCLEVBQUUsVUFBbUIsRUFBRSxhQUF3QixFQUFFLE9BQWtCLEVBQUUsa0JBQTJCLEVBQUUsb0JBQTZCLEVBQUUsUUFBaUIsRUFBRSxpQkFBa0MsRUFBRSxvQkFBeUM7UUFDM1AsSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7U0FBRTtRQUN6RCxJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztTQUFFO1FBQy9ELElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1NBQUU7UUFDeEUsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7U0FBRTtRQUN0RCxJQUFJLGtCQUFrQixLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQztTQUFFO1FBQ3ZGLElBQUksb0JBQW9CLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO1NBQUU7UUFDN0YsSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7U0FBRTtRQUN6RCxJQUFJLGlCQUFpQixLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztTQUFFO1FBQ3BGLElBQUksb0JBQW9CLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO1NBQUU7SUFDakcsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGV2aWNlVHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9EZXZpY2VUeXBlQ29kZSc7XG5pbXBvcnQgeyBEZXZpY2VDcmVhdGlvbkNvZGUgfSBmcm9tICcuLi9lbnVtcy9EZXZpY2VDcmVhdGlvbkNvZGUnO1xuXG5cblxuLy8gRGF0YUluZ2VzdGlvbiBpcyB0aGUgaW5nZXN0aW9uIHBpcGVsaW5lIGNvbmZpZ3VyYXRpb25cbmV4cG9ydCBjbGFzcyBEYXRhSW5nZXN0aW9uIHtcbiBcbiAgICAvLyBJbnB1dCBmaWxlcyBsb2NhdGlvbnMgXG4gICAgcHVibGljIGlucHV0VVJJOiBzdHJpbmc7XG4gXG4gICAgLy8gV2hlcmUgdG8gYXJjaGl2ZSBwcm9jZXNzZWQgZmlsZXMgXG4gICAgcHVibGljIGFyY2hpdmVVUkk6IHN0cmluZztcbiBcbiAgICAvLyBJbnB1dCBmaWxlcyBleHRlbnNpb25zIChmaWx0ZXIgYnkgZXh0ZW5zaW9ucykgLSBpZ25vcmUgaWYgZW1wdHkgXG4gICAgcHVibGljIGlucHV0RmlsZXNFeHQ6IHN0cmluZ1tdO1xuIFxuICAgIC8vIExpc3Qgb2YgSW9UIGRldmljZXMgc3VibmV0cyAtIGlnbm9yZSBpZiBlbXB0eSBcbiAgICBwdWJsaWMgc3ViTmV0czogc3RyaW5nW107XG4gXG4gICAgLy8gVXNhZ2UgdGltZSB3aW5kb3cgZm9yIGFnZ3JlZ2F0aW9uIChpbiBzZWNvbmRzKSBcbiAgICBwdWJsaWMgdXNhZ2VUaW1lV2luZG93U2VjOiBudW1iZXI7XG4gXG4gICAgLy8gU2Vzc2lvbiB0aW1lIHdpbmRvdyBmb3IgYWdncmVnYXRpb24gKGluIHNlY29uZHMpIFxuICAgIHB1YmxpYyBzZXNzaW9uVGltZVdpbmRvd1NlYzogbnVtYmVyO1xuIFxuICAgIC8vIENyb24gc2NoZWR1bGUgdGVtcGxhdGUgaW4gNiBzZWdtZW50IGZvcm1hdCAoc2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Dcm9uKSAtIGxlYXZlIGVtcHR5IGZvciBpbW1lZGlhdGUgcHJvY2Vzc2luZyBcbiAgICBwdWJsaWMgc2NoZWR1bGU6IHN0cmluZztcbiBcbiAgICAvLyBEZWZhdWx0IGRldmljZSB0eXBlOiBVTkRFRklORUQgfCBPVEhFUiB8IENPTlRST0xMRVIgfCBNRVRFUiB8IFNFTlNPUiAuLi4gXG4gICAgcHVibGljIGRlZmF1bHREZXZpY2VUeXBlOiBEZXZpY2VUeXBlQ29kZTtcbiBcbiAgICAvLyBEZXZpY2UgY3JlYXRpb24gcG9saWN5IGJhc2VkIG9uIHRoZSBQQ1AgcGFyc2luZyAoTk9ORSB8IElQIHwgU0lEIHwgRUlEKSBcbiAgICBwdWJsaWMgZGV2aWNlQ3JlYXRpb25Qb2xpY3k6IERldmljZUNyZWF0aW9uQ29kZTtcbiBcbiAgICAgY29uc3RydWN0b3IoaW5wdXRVUkk/OiBzdHJpbmcsIGFyY2hpdmVVUkk/OiBzdHJpbmcsIGlucHV0RmlsZXNFeHQ/OiBzdHJpbmdbXSwgc3ViTmV0cz86IHN0cmluZ1tdLCB1c2FnZVRpbWVXaW5kb3dTZWM/OiBudW1iZXIsIHNlc3Npb25UaW1lV2luZG93U2VjPzogbnVtYmVyLCBzY2hlZHVsZT86IHN0cmluZywgZGVmYXVsdERldmljZVR5cGU/OiBEZXZpY2VUeXBlQ29kZSwgZGV2aWNlQ3JlYXRpb25Qb2xpY3k/OiBEZXZpY2VDcmVhdGlvbkNvZGUpIHsgXG4gICAgICAgIGlmIChpbnB1dFVSSSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuaW5wdXRVUkkgPSBpbnB1dFVSSTsgfVxuICAgICAgICBpZiAoYXJjaGl2ZVVSSSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuYXJjaGl2ZVVSSSA9IGFyY2hpdmVVUkk7IH1cbiAgICAgICAgaWYgKGlucHV0RmlsZXNFeHQgIT09IHVuZGVmaW5lZCkgeyB0aGlzLmlucHV0RmlsZXNFeHQgPSBpbnB1dEZpbGVzRXh0OyB9XG4gICAgICAgIGlmIChzdWJOZXRzICE9PSB1bmRlZmluZWQpIHsgdGhpcy5zdWJOZXRzID0gc3ViTmV0czsgfVxuICAgICAgICBpZiAodXNhZ2VUaW1lV2luZG93U2VjICE9PSB1bmRlZmluZWQpIHsgdGhpcy51c2FnZVRpbWVXaW5kb3dTZWMgPSB1c2FnZVRpbWVXaW5kb3dTZWM7IH1cbiAgICAgICAgaWYgKHNlc3Npb25UaW1lV2luZG93U2VjICE9PSB1bmRlZmluZWQpIHsgdGhpcy5zZXNzaW9uVGltZVdpbmRvd1NlYyA9IHNlc3Npb25UaW1lV2luZG93U2VjOyB9XG4gICAgICAgIGlmIChzY2hlZHVsZSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuc2NoZWR1bGUgPSBzY2hlZHVsZTsgfVxuICAgICAgICBpZiAoZGVmYXVsdERldmljZVR5cGUgIT09IHVuZGVmaW5lZCkgeyB0aGlzLmRlZmF1bHREZXZpY2VUeXBlID0gZGVmYXVsdERldmljZVR5cGU7IH1cbiAgICAgICAgaWYgKGRldmljZUNyZWF0aW9uUG9saWN5ICE9PSB1bmRlZmluZWQpIHsgdGhpcy5kZXZpY2VDcmVhdGlvblBvbGljeSA9IGRldmljZUNyZWF0aW9uUG9saWN5OyB9XG4gICAgfVxuXG59XG5cblxuIl19