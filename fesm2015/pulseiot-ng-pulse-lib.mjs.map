{"version":3,"file":"pulseiot-ng-pulse-lib.mjs","sources":["../../../projects/ng-pulse-lib/src/lib/common/AccountRole.ts","../../../projects/ng-pulse-lib/src/lib/common/Indicator.ts","../../../projects/ng-pulse-lib/src/lib/common/LoginParams.ts","../../../projects/ng-pulse-lib/src/lib/common/StringIntValue.ts","../../../projects/ng-pulse-lib/src/lib/common/StringKeyValue.ts","../../../projects/ng-pulse-lib/src/lib/common/TokenData.ts","../../../projects/ng-pulse-lib/src/lib/common/ZScore.ts","../../../projects/ng-pulse-lib/src/lib/entities/BaseEntity.ts","../../../projects/ng-pulse-lib/src/lib/entities/Account.ts","../../../projects/ng-pulse-lib/src/lib/entities/AuditLog.ts","../../../projects/ng-pulse-lib/src/lib/entities/Calendar.ts","../../../projects/ng-pulse-lib/src/lib/entities/DNSRecord.ts","../../../projects/ng-pulse-lib/src/lib/entities/DataIngestion.ts","../../../projects/ng-pulse-lib/src/lib/entities/Device.ts","../../../projects/ng-pulse-lib/src/lib/entities/Event.ts","../../../projects/ng-pulse-lib/src/lib/entities/Member.ts","../../../projects/ng-pulse-lib/src/lib/entities/Rule.ts","../../../projects/ng-pulse-lib/src/lib/entities/SessionRecord.ts","../../../projects/ng-pulse-lib/src/lib/entities/Shieldex.ts","../../../projects/ng-pulse-lib/src/lib/entities/Stream.ts","../../../projects/ng-pulse-lib/src/lib/entities/StreamConfig.ts","../../../projects/ng-pulse-lib/src/lib/entities/UsageRecord.ts","../../../projects/ng-pulse-lib/src/lib/entities/User.ts","../../../projects/ng-pulse-lib/src/lib/entities/UserMembership.ts","../../../projects/ng-pulse-lib/src/lib/entities/UserMemberships.ts","../../../projects/ng-pulse-lib/src/lib/enums/AccountStatusCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/AccountTypeCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/DeviceStatusCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/DeviceTypeCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/EventTypeCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/MemberRoleCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/RuleTypeCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/SeverityTypeCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/UserStatusCode.ts","../../../projects/ng-pulse-lib/src/lib/enums/UserTypeCode.ts","../../../projects/ng-pulse-lib/src/lib/messages/AccountIdRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/AccountsServiceCreateRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/AccountsServiceFindRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/AccountsServiceUpdateRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/ActionResponse.ts","../../../projects/ng-pulse-lib/src/lib/messages/DeviceIdRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/DevicesServiceCreateRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/DevicesServiceFindRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/DevicesServiceUpdateRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/EmptyRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/EmptyResponse.ts","../../../projects/ng-pulse-lib/src/lib/messages/EntitiesResponse.ts","../../../projects/ng-pulse-lib/src/lib/messages/EntitiesResponseOfAccount.ts","../../../projects/ng-pulse-lib/src/lib/messages/EntitiesResponseOfDevice.ts","../../../projects/ng-pulse-lib/src/lib/messages/EntitiesResponseOfEvent.ts","../../../projects/ng-pulse-lib/src/lib/messages/EntitiesResponseOfMember.ts","../../../projects/ng-pulse-lib/src/lib/messages/EntitiesResponseOfStream.ts","../../../projects/ng-pulse-lib/src/lib/messages/EntitiesResponseOfUser.ts","../../../projects/ng-pulse-lib/src/lib/messages/EntityResponse.ts","../../../projects/ng-pulse-lib/src/lib/messages/EntityResponseOfAccount.ts","../../../projects/ng-pulse-lib/src/lib/messages/EntityResponseOfDevice.ts","../../../projects/ng-pulse-lib/src/lib/messages/EntityResponseOfEvent.ts","../../../projects/ng-pulse-lib/src/lib/messages/EntityResponseOfMember.ts","../../../projects/ng-pulse-lib/src/lib/messages/EntityResponseOfStream.ts","../../../projects/ng-pulse-lib/src/lib/messages/EntityResponseOfUser.ts","../../../projects/ng-pulse-lib/src/lib/messages/EntityResponseOfUserMemberships.ts","../../../projects/ng-pulse-lib/src/lib/messages/EventIdRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/EventsServiceFindRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/MemberIdRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/MembersServiceCreateRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/MembersServiceFindRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/MembersServiceUpdateRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/StreamIdRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/StreamResponse.ts","../../../projects/ng-pulse-lib/src/lib/messages/StreamsServiceCreateRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/StreamsServiceFindRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/StreamsServiceUpdateRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/UserIdRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/UserServiceAuthorizeRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/UserServiceSetAccountRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/UsersServiceCreateMembershipsRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/UsersServiceCreateRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/UsersServiceFindRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/UsersServiceUpdateRequest.ts","../../../projects/ng-pulse-lib/src/lib/messages/WebSocketMessageHeader.ts","../../../projects/ng-pulse-lib/src/utils/localStorage-util.ts","../../../projects/ng-pulse-lib/src/utils/rest-util.ts","../../../projects/ng-pulse-lib/src/config.ts","../../../projects/ng-pulse-lib/src/lib/services/devicesService.ts","../../../projects/ng-pulse-lib/src/lib/services/eventsService.ts","../../../projects/ng-pulse-lib/src/lib/services/sysAccountsService.ts","../../../projects/ng-pulse-lib/src/lib/services/sysMembersService.ts","../../../projects/ng-pulse-lib/src/lib/services/sysStreamsService.ts","../../../projects/ng-pulse-lib/src/lib/services/sysUsersService.ts","../../../projects/ng-pulse-lib/src/lib/services/userService.ts","../../../projects/ng-pulse-lib/src/lib/services/services.export.ts","../../../projects/ng-pulse-lib/src/core-lib.module.ts","../../../projects/ng-pulse-lib/src/public-api.ts","../../../projects/ng-pulse-lib/src/pulseiot-ng-pulse-lib.ts"],"sourcesContent":["import { MemberRoleCode } from '../enums/MemberRoleCode';\n\n\n\n// Account role represents the role of the user in the account\nexport class AccountRole {\n \n    // Account Id \n    public accountId: string;\n \n    // User role in the account: UNDEFINED | ADMIN | OPERATOR | VIEWER \n    public role: MemberRoleCode;\n \n     constructor(accountId?: string, role?: MemberRoleCode) { \n        if (accountId !== undefined) { this.accountId = accountId; }\n        if (role !== undefined) { this.role = role; }\n    }\n\n}\n\n\n","\n\n\n// Indicator model represents a feature and feature value within a normal range\nexport class Indicator {\n \n    // Feature name \n    public name: string;\n \n    // Level of Significance \n    public significance: number;\n \n    // Min normal value \n    public min: number;\n \n    // Max normal value \n    public max: number;\n \n    // Actual value of the feature \n    public actual: number;\n \n     constructor(name?: string, significance?: number, min?: number, max?: number, actual?: number) { \n        if (name !== undefined) { this.name = name; }\n        if (significance !== undefined) { this.significance = significance; }\n        if (min !== undefined) { this.min = min; }\n        if (max !== undefined) { this.max = max; }\n        if (actual !== undefined) { this.actual = actual; }\n    }\n\n}\n\n\n","\n\n\n// Login parameters data model\nexport class LoginParams {\n \n    // User email \n    public email: string;\n \n    // User password \n    public password: string;\n \n    // Access token - in case of re-login with existing token \n    public accessToken: string;\n \n     constructor(email?: string, password?: string, accessToken?: string) { \n        if (email !== undefined) { this.email = email; }\n        if (password !== undefined) { this.password = password; }\n        if (accessToken !== undefined) { this.accessToken = accessToken; }\n    }\n\n}\n\n\n","\n\n\n// String Int Value tuple\nexport class StringIntValue {\n \n    // Key of tuple \n    public key: string;\n \n    // Value of tuple \n    public value: number;\n \n     constructor(key?: string, value?: number) { \n        if (key !== undefined) { this.key = key; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","\n\n\n// Key Value string tuple\nexport class StringKeyValue {\n \n    // Key of tuple \n    public key: string;\n \n    // Value of tuple \n    public value: string;\n \n     constructor(key?: string, value?: string) { \n        if (key !== undefined) { this.key = key; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { MemberRoleCode } from '../enums/MemberRoleCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\n\n\n\n// TokenData model represents a user in account which is encrypted with the JWT token\nexport class TokenData {\n \n    // Account ID \n    public accountId: string;\n \n    // Authenticated subject ID (can be user, or service account) \n    public subjectId: string;\n \n    // Subject type: UNDEFINED | SYSADMIN | USER | SERVICE_ACCOUNT \n    public subjectType: UserTypeCode;\n \n    // Role of user in the account: UNDEFINED | ADMIN | USER \n    public role: MemberRoleCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    public status: UserStatusCode;\n \n    // Token expiration [Epoch milliseconds Timestamp] \n    public expiresIn: number;\n \n     constructor(accountId?: string, subjectId?: string, subjectType?: UserTypeCode, role?: MemberRoleCode, status?: UserStatusCode, expiresIn?: number) { \n        if (accountId !== undefined) { this.accountId = accountId; }\n        if (subjectId !== undefined) { this.subjectId = subjectId; }\n        if (subjectType !== undefined) { this.subjectType = subjectType; }\n        if (role !== undefined) { this.role = role; }\n        if (status !== undefined) { this.status = status; }\n        if (expiresIn !== undefined) { this.expiresIn = expiresIn; }\n    }\n\n}\n\n\n","\n\n\n// ZScore parameters\nexport class ZScore {\n \n    // Mean value \n    public mean: number;\n \n    // Standard Deviation \n    public sD: number;\n \n     constructor(mean?: number, sD?: number) { \n        if (mean !== undefined) { this.mean = mean; }\n        if (sD !== undefined) { this.sD = sD; }\n    }\n\n}\n\n\n","\n\n\n// Base entity includes common fields for all entities (persistence objects) in the system\nexport class BaseEntity {\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n     constructor(id?: string, createdOn?: number, updatedOn?: number) { \n        if (id !== undefined) { this.id = id; }\n        if (createdOn !== undefined) { this.createdOn = createdOn; }\n        if (updatedOn !== undefined) { this.updatedOn = updatedOn; }\n    }\n\n}\n\n\n","import { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Account entity in the system represents customer account\nexport class Account extends BaseEntity {\n \n    // Account name \n    public name: string;\n \n    // Account description \n    public description: string;\n \n    // Account Type: UNDEFINED | DEMO | TRIAL | PARTNER | CUSTOMER \n    public type: AccountTypeCode;\n \n    // Account status: UNDEFINED | ACTIVE | SUSPENDED \n    public status: AccountStatusCode;\n \n    // List of associated account groups (for feature toggle) \n    public groups: string[];\n \n    // When the account will be expired [Epoch milliseconds Timestamp] (0 means no expiration time) \n    public expiredOn: number;\n \n \n}\n\n\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Audit Log - each entry represents a single action done by user\nexport class AuditLog extends BaseEntity {\n \n    // Account Id (empty if it is non-account entity) \n    public accountId: string;\n \n    // User Id \n    public userId: string;\n \n    // User type \n    public userType: UserTypeCode;\n \n    // Action that was performed \n    public action: string;\n \n    // Changed item type \n    public itemType: string;\n \n    // Changed item Id \n    public itemId: string;\n \n    // Item Name \n    public itemName: string;\n \n    // Item value before change [Json] \n    public beforeChange: string;\n \n    // Item delta after change [Json] \n    public afterChange: string;\n \n \n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Checkpoint represents parsing status in time that preserves parsing cycle statistics and last checkpoint (timestamp) to avoid parsing the same files over and over again\nexport class Calendar extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Timestamp marking checkpoint time [Epoch milliseconds Timestamp] \n    public checkpoint: number;\n \n    // Checkpoint label (usually file name) \n    public label: string;\n \n    // Total files parsed in this cycle \n    public totalFiles: number;\n \n    // Total packets parsed in this cycle \n    public totalPackets: number;\n \n \n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// DNSRecord represents network statistics of DNS requests\nexport class DNSRecord extends BaseEntity {\n \n    // Indication to the source location of the record \n    public source: string;\n \n    // Device Id \n    public deviceId: string;\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Start window time [Epoch milliseconds Timestamp] \n    public startTime: number;\n \n    // End window time [Epoch milliseconds Timestamp] \n    public endTime: number;\n \n    // Source IP \n    public sourceIP: string;\n \n    // Fully Qualified Domain Name \n    public fqdn: string;\n \n    // List of A records \n    public records: string[];\n \n \n}\n\n\n","\n\n\n// DataIngestion is the ingestion pipeline configuration\nexport class DataIngestion {\n \n    // Input files locations \n    public inputFilesURIs: string[];\n \n    // Input files extensions (filter by extensions) - ignore if empty \n    public inputFilesExt: string[];\n \n    // Usage time window for aggregation (in seconds) \n    public usageTimeWindowSec: number;\n \n    // Session time window for aggregation (in seconds) \n    public sessionTimeWindowSec: number;\n \n    // Usage data output locations \n    public usageOutputURIs: string[];\n \n    // Usage data output locations \n    public sessionOutputURIs: string[];\n \n    // Usage data output locations \n    public dNSOutputURIs: string[];\n \n    // Where to back-up raw data files \n    public rawDataBackupURI: string;\n \n    // Flag to indicate overwrite existing files \n    public overwriteFiles: boolean;\n \n    // Post-processing file action: DELETE | RENAME | ... \n    public postAction: string;\n \n     constructor(inputFilesURIs?: string[], inputFilesExt?: string[], usageTimeWindowSec?: number, sessionTimeWindowSec?: number, usageOutputURIs?: string[], sessionOutputURIs?: string[], dNSOutputURIs?: string[], rawDataBackupURI?: string, overwriteFiles?: boolean, postAction?: string) { \n        if (inputFilesURIs !== undefined) { this.inputFilesURIs = inputFilesURIs; }\n        if (inputFilesExt !== undefined) { this.inputFilesExt = inputFilesExt; }\n        if (usageTimeWindowSec !== undefined) { this.usageTimeWindowSec = usageTimeWindowSec; }\n        if (sessionTimeWindowSec !== undefined) { this.sessionTimeWindowSec = sessionTimeWindowSec; }\n        if (usageOutputURIs !== undefined) { this.usageOutputURIs = usageOutputURIs; }\n        if (sessionOutputURIs !== undefined) { this.sessionOutputURIs = sessionOutputURIs; }\n        if (dNSOutputURIs !== undefined) { this.dNSOutputURIs = dNSOutputURIs; }\n        if (rawDataBackupURI !== undefined) { this.rawDataBackupURI = rawDataBackupURI; }\n        if (overwriteFiles !== undefined) { this.overwriteFiles = overwriteFiles; }\n        if (postAction !== undefined) { this.postAction = postAction; }\n    }\n\n}\n\n\n","import { DeviceTypeCode } from '../enums/DeviceTypeCode';\nimport { DeviceStatusCode } from '../enums/DeviceStatusCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Device entity is an IoT device representation with attributes and state\nexport class Device extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Device name \n    public name: string;\n \n    // Device description \n    public description: string;\n \n    // Device type: UNDEFINED | CONTROLLER | METER | SENSOR ... \n    public type: DeviceTypeCode;\n \n    // Device status: UNDEFINED | PENDING | ACTIVE |  INACTIVE | SUSPENDED \n    public status: DeviceStatusCode;\n \n    // Device last activity timestamp [Epoch milliseconds Timestamp] \n    public lastActivity: number;\n \n    // Device MAC address \n    public mac: string;\n \n    // Device IP address (IPv4 or IPv6) \n    public ip: string;\n \n    // Device mobile subscriber id (IMSI or SUPI for 5G) \n    public sid: string;\n \n    // Device mobile equipment id (IMEI or PEI for 5G) \n    public eid: string;\n \n    // Device current security score \n    public score: number;\n \n    // List of device tags \n    public tags: string[];\n \n \n}\n\n\n","import { EventTypeCode } from '../enums/EventTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { Indicator } from '../common/Indicator';\nimport { RuleTypeCode } from '../enums/RuleTypeCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Cyber event entity\nexport class Event extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Device Id \n    public deviceId: string;\n \n    // Start window time [Epoch milliseconds Timestamp] \n    public startTime: number;\n \n    // End window time [Epoch milliseconds Timestamp] \n    public endTime: number;\n \n    // Event type: UNDEFINED | DDOS | PORT_SCANNING | DEVICE_TAKEOVER ... \n    public type: EventTypeCode;\n \n    // Event severity level: UNDEFINED | LOW | MEDIUM | HIGH | CRITICAL \n    public severity: SeverityTypeCode;\n \n    // Event current security score \n    public score: number;\n \n    // List of event indicators \n    public indicators: Indicator[];\n \n    // Rule engine type \n    public ruleType: RuleTypeCode;\n \n    // Static Rule id \n    public ruleId: string;\n \n    // Event description \n    public description: string;\n \n    // Additional Event tags \n    public tags: string[];\n \n \n}\n\n\n","import { MemberRoleCode } from '../enums/MemberRoleCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Member represents a user in the account and the role he has in this account\n// User may have several memberships for several accounts, each with a different role\nexport class Member extends BaseEntity {\n \n    // User Id \n    public userId: string;\n \n    // Account Id \n    public accountId: string;\n \n    // Member role in the account \n    public role: MemberRoleCode;\n \n \n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// RuleTemplate entity is used to define rules quickly based on pre-defined templates\nexport class Rule extends BaseEntity {\n \n    // Rule template name \n    public name: string;\n \n    // Rule template description \n    public description: string;\n \n    // Rule context - what is the data type to be injected \n    public context: string;\n \n    // List of conditions, all of them must be true for the rule to trigger event \n    public conditions: string[];\n \n \n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// SessionRecord represents network statistics for a session\nexport class SessionRecord extends BaseEntity {\n \n    // Indication to the source location of the record \n    public source: string;\n \n    // Session Id \n    public sessionId: string;\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Device Id \n    public deviceId: string;\n \n    // Start window time [Epoch milliseconds Timestamp] \n    public startTime: number;\n \n    // End window time [Epoch milliseconds Timestamp] \n    public endTime: number;\n \n    // Source IP \n    public sourceIP: string;\n \n    // Source port \n    public sourcePort: number;\n \n    // Destination IP \n    public destinationIP: string;\n \n    // Destination Port \n    public destinationPort: number;\n \n    // Protocol \n    public protocol: string;\n \n    // Number of incoming packets (to the device) \n    public packetsIn: number;\n \n    // Number of outgoing packets (from the device) \n    public packetsOut: number;\n \n    // Total number of incoming bytes (to the device) \n    public bytesIn: number;\n \n    // Total number of outgoing bytes (from the device) \n    public bytesOut: number;\n \n    // List of labels \n    public labels: string[];\n \n \n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Shieldex is a security score per account level calculated periodically\nexport class Shieldex extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Total number of events per account per stream \n    public eventCount: number;\n \n    // Shield index score (1-100) \n    public indexScore: number;\n \n \n}\n\n\n","import { StreamConfig } from '../entities/StreamConfig';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Stream represents data stream configuration for group of identical IoT devices service the same purpose and sharing the same attributes (e.g. water meter, point-of-sale, ATM IP camera etc)\nexport class Stream extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream name \n    public name: string;\n \n    // Stream description \n    public description: string;\n \n    // Stream configuration \n    public config: StreamConfig;\n \n \n}\n\n\n","import { DataIngestion } from '../entities/DataIngestion';\n\n\n\n// StreamConfig is a stream configuration description\nexport class StreamConfig {\n \n    // Stream data ingestion pipeline \n    public ingest: DataIngestion;\n \n     constructor(ingest?: DataIngestion) { \n        if (ingest !== undefined) { this.ingest = ingest; }\n    }\n\n}\n\n\n","import { StringIntValue } from '../common/StringIntValue';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// UsageRecord represents network statistics\nexport class UsageRecord extends BaseEntity {\n \n    // Indication to the source location of the record \n    public source: string;\n \n    // Session Id \n    public sessionId: string;\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Device Id \n    public deviceId: string;\n \n    // Start window time [Epoch milliseconds Timestamp] \n    public startTime: number;\n \n    // End window time [Epoch milliseconds Timestamp] \n    public endTime: number;\n \n    // Source IP \n    public sourceIP: string;\n \n    // List of source ports mapped to counter (map[string]int) \n    public sourcePorts: StringIntValue[];\n \n    // Number of incoming packets (to the device) \n    public packetsIn: number;\n \n    // Number of outgoing packets (from the device) \n    public packetsOut: number;\n \n    // Total number of incoming bytes (to the device) \n    public bytesIn: number;\n \n    // Total number of outgoing bytes (from the device) \n    public bytesOut: number;\n \n    // List of inbound endpoints (mapped to counter) \n    public endpointsIn: StringIntValue[];\n \n    // Number of inbound endpoints \n    public endpointsInCount: number;\n \n    // List of outbound endpoints (mapped to counter) \n    public endpointsOut: StringIntValue[];\n \n    // Number of outbound endpoints \n    public endpointsOutCount: number;\n \n    // List of destination ports (mapped to counter) \n    public dstPorts: StringIntValue[];\n \n    // Number of destination ports \n    public dstPortsCount: number;\n \n    // Number of outgoing Ack flags (applicable only for TCP based protocols) \n    public srcAckFlags: number;\n \n    // Number of incoming Ack flags (applicable only for TCP based protocols) \n    public dstAckFlags: number;\n \n    // Number of outgoing Syn flags (applicable only for TCP based protocols) \n    public srcSynFlags: number;\n \n    // Number of incoming Syn flags (applicable only for TCP based protocols) \n    public dstSynFlags: number;\n \n    // Number of outgoing Rst flags (applicable only for TCP based protocols) \n    public srcRstFlags: number;\n \n    // Number of incoming Rst flags (applicable only for TCP based protocols) \n    public dstRstFlags: number;\n \n    // List of labels \n    public labels: string[];\n \n \n}\n\n\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// User represents a human / system operator that has access to the system, and can perform operations\n// User authentication is done by an external identity provider\nexport class User extends BaseEntity {\n \n    // User name \n    public name: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public type: UserTypeCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    public status: UserStatusCode;\n \n    // Default account Id \n    public defaultAccount: string;\n \n \n}\n\n\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { AccountRole } from '../common/AccountRole';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// UserMembership model include user data with a specific account membership\nexport class UserMembership extends BaseEntity {\n \n    // User name \n    public name: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public type: UserTypeCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    public status: UserStatusCode;\n \n    // Default account Id \n    public defaultAccount: string;\n \n    // User role in the account \n    public accountRole: AccountRole;\n \n \n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { AccountRole } from '../common/AccountRole';\n\n\n\n// UserMemberships model include user data and all its accounts memberships\nexport class UserMemberships extends BaseEntity {\n \n    // User name \n    public name: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public type: UserTypeCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    public status: UserStatusCode;\n \n    // Default account Id \n    public defaultAccount: string;\n \n    // List of user roles in all accounts \n    public accountRoles: AccountRole[];\n \n \n}\n\n\n","\n// Account status code\nexport enum AccountStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Active account [1] \n    ACTIVE = 1,\n \n    // Suspended (non-active) account [2] \n    SUSPENDED = 2,\n \n    // Deleted account [3] \n    DELETED = 3,\n \n}","\n// Account type code\nexport enum AccountTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Demo account for internal use [1] \n    DEMO = 1,\n \n    // Trial account for pilots [2] \n    TRIAL = 2,\n \n    // Active account for partner [3] \n    PARTNER = 3,\n \n    // Active account for paying customers [4] \n    CUSTOMER = 4,\n \n}","\n// Device status code\nexport enum DeviceStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Device is registered and pending verification [1] \n    PENDING = 1,\n \n    // Active device in the system [2] \n    ACTIVE = 2,\n \n    // Inactive device [3] \n    INACTIVE = 3,\n \n    // Suspended device (about to be deleted) [4] \n    SUSPENDED = 4,\n \n}","\n// Device type code\nexport enum DeviceTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Industrial Controller [1] \n    CONTROLLER = 1,\n \n    // General smart meter [2] \n    METER = 2,\n \n    // General sensor [3] \n    SENSOR = 3,\n \n    // General camera [4] \n    CAMERA = 4,\n \n    // Point of sale [5] \n    POS = 5,\n \n    // Pump [6] \n    PUMP = 6,\n \n    // EV charging station [7] \n    CHARGING_STATION = 7,\n \n    // Smart lightning [8] \n    LIGHTNING = 8,\n \n    // Temperature sensor [9] \n    TEMPERATURE_SENSOR = 9,\n \n    // Air Quality sensor [10] \n    AIR_QUALITY_SENSOR = 10,\n \n    // Valve [11] \n    VALVE = 11,\n \n    // Gateway [12] \n    GATEWAY = 12,\n \n}","\n// Event type code\nexport enum EventTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Device Takeover [1] \n    DEVICE_TAKEOVER = 1,\n \n    // DDoS [2] \n    DDOS = 2,\n \n    // Unknown Malware [3] \n    UNKNOWN_MALWARE = 3,\n \n    // Man-in-the-Middle [4] \n    MAN_IN_THE_MIDDLE = 4,\n \n    // Data Theft [5] \n    DATA_THEFT = 5,\n \n    // Port Scanning [6] \n    PORT_SCANNING = 6,\n \n    // Abnormal Download [7] \n    ABNORMAL_DOWNLOAD = 7,\n \n    // Abnormal Incoming Connection [8] \n    ABNORMAL_INCOMING_CONNECTION = 8,\n \n    // Unsuccessful Connection Attempts [9] \n    UNSUCCESSFUL_CONNECTION_ATTEMPTS = 9,\n \n    // High Volume Transmit [10] \n    HIGH_VOLUME_TRANSIT = 10,\n \n    // Device Level Attack [11] \n    DEVICE_LEVEL_ATTACK = 11,\n \n    // Replay Attack [12] \n    REPLAY_ATTACK = 12,\n \n    // Attempted Device Takeover [13] \n    DEVICE_TAKEOVER_ATTEMPT = 13,\n \n    // Unknown Operation' [14] \n    UNKNOWN_OPERATION = 14,\n \n    // Crypto Mining [15] \n    CRYPTO_MINING = 15,\n \n    // Suspicious IP [16] \n    SUSPICIOUS_IP = 16,\n \n}","\n// Member role code (represent role of user in the account)\nexport enum MemberRoleCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Account administrator can perform all operations [1] \n    ADMIN = 1,\n \n    // Account operator can perform operations on events only [2] \n    OPERATOR = 2,\n \n    // Viewer has read-only permissions [3] \n    VIEWER = 3,\n \n}","\n// RuleTypeCode represents the sources (engines) of rules\nexport enum RuleTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Suspicious IP based on IP reputation engine [1] \n    SUSPICIOUS_IP = 1,\n \n    // Static rule based on deterministic rule engine [2] \n    STATIC = 2,\n \n    // Rule based on anomaly detection and classification [3] \n    ANOMALY = 3,\n \n}","\n// Severity type (level) code\nexport enum SeverityTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // No effect [1] \n    NO_EFFECT = 1,\n \n    // Notification only [2] \n    NOTIFICATION = 2,\n \n    // Lowest severity [3] \n    LOWEST = 3,\n \n    // Low severity [4] \n    LOW = 4,\n \n    // Medium severity [5] \n    MEDIUM = 5,\n \n    // High severity [6] \n    HIGH = 6,\n \n    // Highest severity [7] \n    HIGHEST = 7,\n \n    // Critical severity [8] \n    CRITICAL = 8,\n \n}","\n// User status code\nexport enum UserStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // User is registered and pending verification [1] \n    PENDING = 1,\n \n    // Active user in the system [2] \n    ACTIVE = 2,\n \n    // Blocked user (only account system can unblock the user) [4] \n    BLOCKED = 3,\n \n    // Suspended user (about to be deleted) [8] \n    SUSPENDED = 4,\n \n}","\n// User type code\nexport enum UserTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // System administrator has access to all accounts and permissions to perform all actions [1] \n    SYSADMIN = 1,\n \n    // Support user has view permissions only for all accounts that enabled option Enable Support [2] \n    SUPPORT = 2,\n \n    // Account user - has access to specific accounts with role based access control [4] \n    USER = 4,\n \n    // Account service - to be used by other systems to perform actions using the API (can't login as a user to the portal)' [5]` \n    SERVICE = 5,\n \n}","\n\n\nexport class AccountIdRequest {\n \n    // Account Id \n    public id: string;\n \n     constructor(id?: string) { \n        if (id !== undefined) { this.id = id; }\n    }\n\n}\n\n\n","import { Account } from '../entities/Account';\n\n\n\nexport class AccountsServiceCreateRequest {\n \n    // Account data to create \n    public body: Account;\n \n     constructor(body?: Account) { \n        if (body !== undefined) { this.body = body; }\n    }\n\n}\n\n\n","import { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\n\n\n\nexport class AccountsServiceFindRequest {\n \n    // Filter by name or partial name or id \n    public search: string;\n \n    // Filter by account type(s) \n    public type: AccountTypeCode[];\n \n    // Filter by account status(s) \n    public status: AccountStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public size: number;\n \n     constructor(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, size?: number) { \n        if (search !== undefined) { this.search = search; }\n        if (type !== undefined) { this.type = type; }\n        if (status !== undefined) { this.status = status; }\n        if (sort !== undefined) { this.sort = sort; }\n        if (page !== undefined) { this.page = page; }\n        if (size !== undefined) { this.size = size; }\n    }\n\n}\n\n\n","import { Account } from '../entities/Account';\n\n\n\nexport class AccountsServiceUpdateRequest {\n \n    // Account data to update \n    public body: Account;\n \n     constructor(body?: Account) { \n        if (body !== undefined) { this.body = body; }\n    }\n\n}\n\n\n","\n\n\n// ActionResponse message is returned for any action on entity with no return data (e.d. delete)\nexport class ActionResponse {\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Entity key \n    public key: string;\n \n    // Additional data \n    public data: string;\n \n     constructor(code?: number, error?: string, key?: string, data?: string) { \n        if (code !== undefined) { this.code = code; }\n        if (error !== undefined) { this.error = error; }\n        if (key !== undefined) { this.key = key; }\n        if (data !== undefined) { this.data = data; }\n    }\n\n}\n\n\n","\n\n\nexport class DeviceIdRequest {\n \n    // Device Id \n    public id: string;\n \n     constructor(id?: string) { \n        if (id !== undefined) { this.id = id; }\n    }\n\n}\n\n\n","import { Device } from '../entities/Device';\n\n\n\nexport class DevicesServiceCreateRequest {\n \n    // Device data to create \n    public body: Device;\n \n     constructor(body?: Device) { \n        if (body !== undefined) { this.body = body; }\n    }\n\n}\n\n\n","import { DeviceTypeCode } from '../enums/DeviceTypeCode';\nimport { DeviceStatusCode } from '../enums/DeviceStatusCode';\n\n\n\nexport class DevicesServiceFindRequest {\n \n    // Filter by account id \n    public accountId: string;\n \n    // Filter by stream id \n    public streamId: string;\n \n    // Filter by free text search on: device id, name, description, mac address, IP, Subscriber Id, Equipment Id \n    public search: string;\n \n    // Filter by device type(s) \n    public type: DeviceTypeCode[];\n \n    // Filter by device status(s) \n    public status: DeviceStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public size: number;\n \n     constructor(accountId?: string, streamId?: string, search?: string, type?: DeviceTypeCode[], status?: DeviceStatusCode[], sort?: string, page?: number, size?: number) { \n        if (accountId !== undefined) { this.accountId = accountId; }\n        if (streamId !== undefined) { this.streamId = streamId; }\n        if (search !== undefined) { this.search = search; }\n        if (type !== undefined) { this.type = type; }\n        if (status !== undefined) { this.status = status; }\n        if (sort !== undefined) { this.sort = sort; }\n        if (page !== undefined) { this.page = page; }\n        if (size !== undefined) { this.size = size; }\n    }\n\n}\n\n\n","import { Device } from '../entities/Device';\n\n\n\nexport class DevicesServiceUpdateRequest {\n \n    // Device data to update \n    public body: Device;\n \n     constructor(body?: Device) { \n        if (body !== undefined) { this.body = body; }\n    }\n\n}\n\n\n","\n\n\nexport class EmptyRequest {\n \n     constructor() { \n    }\n\n}\n\n\n","\n\n\nexport class EmptyResponse {\n \n     constructor() { \n    }\n\n}\n\n\n","\n\n\n// EntitiesResponse message is returned for any action returning multiple entities\nexport class EntitiesResponse {\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public size: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n     constructor(code?: number, error?: string, page?: number, size?: number, pages?: number, total?: number) { \n        if (code !== undefined) { this.code = code; }\n        if (error !== undefined) { this.error = error; }\n        if (page !== undefined) { this.page = page; }\n        if (size !== undefined) { this.size = size; }\n        if (pages !== undefined) { this.pages = pages; }\n        if (total !== undefined) { this.total = total; }\n    }\n\n}\n\n\n","import { Account } from '../entities/Account';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n\n\nexport class EntitiesResponseOfAccount extends EntitiesResponse {\n \n    // Account list \n    public list: Account[];\n \n \n}\n\n\n","import { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { Device } from '../entities/Device';\n\n\n\nexport class EntitiesResponseOfDevice extends EntitiesResponse {\n \n    // Device list \n    public list: Device[];\n \n \n}\n\n\n","import { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { Event } from '../entities/Event';\n\n\n\nexport class EntitiesResponseOfEvent extends EntitiesResponse {\n \n    // Event list \n    public list: Event[];\n \n \n}\n\n\n","import { Member } from '../entities/Member';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n\n\nexport class EntitiesResponseOfMember extends EntitiesResponse {\n \n    // Member list \n    public list: Member[];\n \n \n}\n\n\n","import { Stream } from '../entities/Stream';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n\n\nexport class EntitiesResponseOfStream extends EntitiesResponse {\n \n    // Stream list \n    public list: Stream[];\n \n \n}\n\n\n","import { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { User } from '../entities/User';\n\n\n\nexport class EntitiesResponseOfUser extends EntitiesResponse {\n \n    // User list \n    public list: User[];\n \n \n}\n\n\n","\n\n\n// EntityResponse message is returned for any create/update action on entity\nexport class EntityResponse {\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n     constructor(code?: number, error?: string) { \n        if (code !== undefined) { this.code = code; }\n        if (error !== undefined) { this.error = error; }\n    }\n\n}\n\n\n","import { Account } from '../entities/Account';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n\n\nexport class EntityResponseOfAccount extends EntityResponse {\n \n    // Account \n    public entity: Account;\n \n \n}\n\n\n","import { Device } from '../entities/Device';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n\n\nexport class EntityResponseOfDevice extends EntityResponse {\n \n    // Device \n    public entity: Device;\n \n \n}\n\n\n","import { Event } from '../entities/Event';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n\n\nexport class EntityResponseOfEvent extends EntityResponse {\n \n    // Event \n    public entity: Event;\n \n \n}\n\n\n","import { Member } from '../entities/Member';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n\n\nexport class EntityResponseOfMember extends EntityResponse {\n \n    // Member \n    public entity: Member;\n \n \n}\n\n\n","import { Stream } from '../entities/Stream';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n\n\nexport class EntityResponseOfStream extends EntityResponse {\n \n    // Stream \n    public entity: Stream;\n \n \n}\n\n\n","import { EntityResponse } from '../messages/EntityResponse';\nimport { User } from '../entities/User';\n\n\n\nexport class EntityResponseOfUser extends EntityResponse {\n \n    // User \n    public entity: User;\n \n \n}\n\n\n","import { UserMemberships } from '../entities/UserMemberships';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n\n\nexport class EntityResponseOfUserMemberships extends EntityResponse {\n \n    // UserMemberships \n    public entity: UserMemberships;\n \n \n}\n\n\n","\n\n\nexport class EventIdRequest {\n \n    // Event Id \n    public id: string;\n \n     constructor(id?: string) { \n        if (id !== undefined) { this.id = id; }\n    }\n\n}\n\n\n","import { EventTypeCode } from '../enums/EventTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\n\n\n\nexport class EventsServiceFindRequest {\n \n    // Filter by account id \n    public accountId: string;\n \n    // Filter by stream id \n    public streamId: string;\n \n    // Filter by device id \n    public deviceId: string;\n \n    // Filter events after the provided timestamp [Epoch milliseconds Timestamp] Use negative number for relative time in milliseconds from now \n    public from: number;\n \n    // Filter events before the provided timestamp [Epoch milliseconds Timestamp] Use negative number for relative time in milliseconds from now \n    public to: number;\n \n    // Filter by event type(s) \n    public type: EventTypeCode[];\n \n    // Filter by event severity(ies) \n    public severity: SeverityTypeCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public size: number;\n \n     constructor(accountId?: string, streamId?: string, deviceId?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], sort?: string, page?: number, size?: number) { \n        if (accountId !== undefined) { this.accountId = accountId; }\n        if (streamId !== undefined) { this.streamId = streamId; }\n        if (deviceId !== undefined) { this.deviceId = deviceId; }\n        if (from !== undefined) { this.from = from; }\n        if (to !== undefined) { this.to = to; }\n        if (type !== undefined) { this.type = type; }\n        if (severity !== undefined) { this.severity = severity; }\n        if (sort !== undefined) { this.sort = sort; }\n        if (page !== undefined) { this.page = page; }\n        if (size !== undefined) { this.size = size; }\n    }\n\n}\n\n\n","\n\n\nexport class MemberIdRequest {\n \n    // Member Id \n    public id: string;\n \n     constructor(id?: string) { \n        if (id !== undefined) { this.id = id; }\n    }\n\n}\n\n\n","import { Member } from '../entities/Member';\n\n\n\nexport class MembersServiceCreateRequest {\n \n    // Member data to create \n    public body: Member;\n \n     constructor(body?: Member) { \n        if (body !== undefined) { this.body = body; }\n    }\n\n}\n\n\n","import { MemberRoleCode } from '../enums/MemberRoleCode';\n\n\n\nexport class MembersServiceFindRequest {\n \n    // Filter by account id - get all members of specific account \n    public accountId: string;\n \n    // Filter by user id - get all user account memberships \n    public userId: string;\n \n    // Filter by account role(s) \n    public role: MemberRoleCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public size: number;\n \n     constructor(accountId?: string, userId?: string, role?: MemberRoleCode[], sort?: string, page?: number, size?: number) { \n        if (accountId !== undefined) { this.accountId = accountId; }\n        if (userId !== undefined) { this.userId = userId; }\n        if (role !== undefined) { this.role = role; }\n        if (sort !== undefined) { this.sort = sort; }\n        if (page !== undefined) { this.page = page; }\n        if (size !== undefined) { this.size = size; }\n    }\n\n}\n\n\n","import { Member } from '../entities/Member';\n\n\n\nexport class MembersServiceUpdateRequest {\n \n    // Member data to update \n    public body: Member;\n \n     constructor(body?: Member) { \n        if (body !== undefined) { this.body = body; }\n    }\n\n}\n\n\n","\n\n\nexport class StreamIdRequest {\n \n    // Stream Id \n    public id: string;\n \n     constructor(id?: string) { \n        if (id !== undefined) { this.id = id; }\n    }\n\n}\n\n\n","\n\n\n// Response of byte array\nexport class StreamResponse {\n \n    // \n    public content: File;\n \n     constructor(content?: File) { \n        if (content !== undefined) { this.content = content; }\n    }\n\n}\n\n\n","import { Stream } from '../entities/Stream';\n\n\n\nexport class StreamsServiceCreateRequest {\n \n    // Stream data to create \n    public body: Stream;\n \n     constructor(body?: Stream) { \n        if (body !== undefined) { this.body = body; }\n    }\n\n}\n\n\n","\n\n\nexport class StreamsServiceFindRequest {\n \n    // Filter by account id \n    public accountId: string;\n \n    // Filter by name or partial name or id \n    public search: string;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public size: number;\n \n     constructor(accountId?: string, search?: string, sort?: string, page?: number, size?: number) { \n        if (accountId !== undefined) { this.accountId = accountId; }\n        if (search !== undefined) { this.search = search; }\n        if (sort !== undefined) { this.sort = sort; }\n        if (page !== undefined) { this.page = page; }\n        if (size !== undefined) { this.size = size; }\n    }\n\n}\n\n\n","import { Stream } from '../entities/Stream';\n\n\n\nexport class StreamsServiceUpdateRequest {\n \n    // Stream data to update \n    public body: Stream;\n \n     constructor(body?: Stream) { \n        if (body !== undefined) { this.body = body; }\n    }\n\n}\n\n\n","\n\n\nexport class UserIdRequest {\n \n    // User Id \n    public id: string;\n \n     constructor(id?: string) { \n        if (id !== undefined) { this.id = id; }\n    }\n\n}\n\n\n","import { LoginParams } from '../common/LoginParams';\n\n\n\nexport class UserServiceAuthorizeRequest {\n \n    // Login parameters to authorize \n    public body: LoginParams;\n \n     constructor(body?: LoginParams) { \n        if (body !== undefined) { this.body = body; }\n    }\n\n}\n\n\n","\n\n\nexport class UserServiceSetAccountRequest {\n \n    // Account Id to switch \n    public id: string;\n \n     constructor(id?: string) { \n        if (id !== undefined) { this.id = id; }\n    }\n\n}\n\n\n","import { UserMemberships } from '../entities/UserMemberships';\n\n\n\nexport class UsersServiceCreateMembershipsRequest {\n \n    // User memberships data to create \n    public body: UserMemberships;\n \n     constructor(body?: UserMemberships) { \n        if (body !== undefined) { this.body = body; }\n    }\n\n}\n\n\n","import { User } from '../entities/User';\n\n\n\nexport class UsersServiceCreateRequest {\n \n    // User data to create \n    public body: User;\n \n     constructor(body?: User) { \n        if (body !== undefined) { this.body = body; }\n    }\n\n}\n\n\n","import { UserStatusCode } from '../enums/UserStatusCode';\nimport { UserTypeCode } from '../enums/UserTypeCode';\n\n\n\nexport class UsersServiceFindRequest {\n \n    // Filter by name or partial name or id \n    public search: string;\n \n    // Filter by user type(s) \n    public type: UserTypeCode[];\n \n    // Filter by user status(s) \n    public status: UserStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public size: number;\n \n     constructor(search?: string, type?: UserTypeCode[], status?: UserStatusCode[], sort?: string, page?: number, size?: number) { \n        if (search !== undefined) { this.search = search; }\n        if (type !== undefined) { this.type = type; }\n        if (status !== undefined) { this.status = status; }\n        if (sort !== undefined) { this.sort = sort; }\n        if (page !== undefined) { this.page = page; }\n        if (size !== undefined) { this.size = size; }\n    }\n\n}\n\n\n","import { User } from '../entities/User';\n\n\n\nexport class UsersServiceUpdateRequest {\n \n    // User data to update \n    public body: User;\n \n     constructor(body?: User) { \n        if (body !== undefined) { this.body = body; }\n    }\n\n}\n\n\n","\n\n\n// @WebSocketMessage Message header for all web socket messages\nexport class WebSocketMessageHeader {\n \n    // \n    public op: number;\n \n    // \n    public ver: number;\n \n    // \n    public id: number;\n \n    // \n    public cid: number;\n \n    // \n    public sid: string;\n \n     constructor(opcode?: number, version?: number, messageId?: number, correlationId?: number, sessionId?: string) { \n        if (opcode !== undefined) { this.op = opcode; }\n        if (version !== undefined) { this.ver = version; }\n        if (messageId !== undefined) { this.id = messageId; }\n        if (correlationId !== undefined) { this.cid = correlationId; }\n        if (sessionId !== undefined) { this.sid = sessionId; }\n    }\n\n}\n\n\n","// Access token key in the local storage\nconst tokenKey = 'portalAccessToken';\nconst loginKey = 'portalLoginData';\n\nexport function getToken() {\n  return localStorage.getItem(tokenKey);\n}\n\nexport function setToken(token: string) {\n  localStorage.setItem(tokenKey, token);\n}\n\nexport function removeToken() {\n  localStorage.removeItem(tokenKey);\n  localStorage.removeItem(loginKey);\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpRequest, HttpResponse } from '@angular/common/http';  // replaces previous Http service\nimport { map, catchError } from 'rxjs/operators';\nimport * as LocalStorageUtil from './localStorage-util';\n\n/**\n * Utility class for all REST services with common functions\n */\n@Injectable()\nexport class RestUtil {\n\n  // Set headers\n  private headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  /**\n   * Constructor with injected authentication service\n   */\n  constructor(private http: HttpClient) { }\n\n  /**\n   * Upload is HTTP POST action but the body is File object\n   */\n  upload(file: File, url: string, ...params: string[]) {\n\n    const resourceUrl = this.buildUrl(url, ...params);\n\n    const formData: FormData = new FormData();\n    formData.append('fileKey', file, file.name);\n\n    const req = new HttpRequest('POST', resourceUrl, formData, {\n      reportProgress: false,\n      responseType: 'json',\n    });\n    return this.http.request(req);\n  }\n\n  /**\n   * Download is HTTP GET action but the content is blob\n   */\n  download(fileName: string, url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n\n    let downloadLink = fileName\n\n    // extract file name\n    params.forEach(p => {\n      let arr = p.split('=');\n      if (arr.length > 1) {\n        if (arr[0].toLowerCase() === 'filename') {\n          downloadLink = arr[1];\n        }\n      }\n    });\n\n    // return this.http.get(resourceUrl, {responseType: 'blob'}).subscribe((data) => {\n    //   const downloadURL = window.URL.createObjectURL(data);\n    //   const link = document.createElement('a');\n    //   link.href = downloadURL;\n    //   link.download = downloadLink;\n    //\n    //   link.click();\n    // });\n\n    // Set content type for: json / csv / xml / pdf\n    let contentType = 'application/json';\n    if (downloadLink.toLowerCase().endsWith('csv')) {\n      contentType = 'text/csv';\n    } else if (downloadLink.toLowerCase().endsWith('xml')) {\n      contentType = 'text/xml';\n    } else if (downloadLink.toLowerCase().endsWith('pdf')) {\n      contentType = 'application/pdf';\n    }\n\n    return this.http.get(resourceUrl, {\n      responseType: 'blob',\n      reportProgress: true,\n      observe: 'events',\n      headers: new HttpHeaders({ 'Content-Type': contentType })\n    });\n  }\n  \n  /**\n   * HTTP GET action\n   */\n  get(url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .get(resourceUrl, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError),\n      );\n  }\n\n  /**\n   * HTTP POST action\n   */\n  post(url: string, body?: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .post(resourceUrl, body, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * HTTP PUT action\n   */\n  put(url: string, body?: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .put(resourceUrl, body, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * HTTP DELETE action\n   */\n  delete(url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .delete(resourceUrl, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * Construct URL with parameters\n   */\n  private buildUrl(url: string, ...params: string[]) {\n    return (params === null) ? url : (params.length === 0) ? url : `${url}${params && params.length > 0 ? '?'+params.join('&') : ''}`;\n  }\n\n  /**\n   * Process the response, extract and refresh access token and return the body\n   */\n  private processResponse(response: HttpResponse<any>) {\n\n    if (response.status === 401) {\n      LocalStorageUtil.removeToken();\n      throw new Error('Access denied, reset token: ' + response.status);\n    } else if (response.status > 400) {\n      throw new Error('HTTP status error: ' + response.status);\n    }\n\n    // Get access token from header and update authentication service\n\n    const accessToken = response.headers.get('X-ACCESS-TOKEN');\n\n    if ((accessToken !== null) && (accessToken.length > 0)) {\n      LocalStorageUtil.setToken(accessToken);\n    } \n    \n    if (response.body && response.body.code && response.body.code !== 0) {\n      throw { code: response.body.code, message: response.body.error };\n    }\n    \n    return response.body;\n  }\n\n  /**\n   * Error handling\n   */\n  private handleError(error: any): Promise<any> {\n    if (error.code) {\n      return Promise.reject(error);\n    }\n    return Promise.reject(error.message || error);\n  }\n}\n","export class PulseConfig {\n    api: string;\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { PulseConfig } from '../../config';\n\nimport { Device } from '../entities/Device';\nimport { DeviceTypeCode } from '../enums/DeviceTypeCode';\nimport { DeviceStatusCode } from '../enums/DeviceStatusCode';\n\n\n\n// List of device related actions for the operator \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class DevicesService {\n\n  // URL to web api\n  private baseUrl = '/devices';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new device\n   * @Return: EntityResponse<Device>\n   */\n  create() {\n    return this.rest.post(`${this.baseUrl}`, '');\n  }\n\n  /**\n   * Update existing device in the system\n   * @Return: EntityResponse<Device>\n   */\n  update(body?: Device) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete device from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single device by id\n   * @Return: EntityResponse<Device>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of devices by query\n   * @Return: EntitiesResponse<Device>\n   */\n  find(accountId?: string, streamId?: string, search?: string, type?: DeviceTypeCode[], status?: DeviceStatusCode[], sort?: string, page?: number, size?: number) {\n    const params = new Array();\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { PulseConfig } from '../../config';\n\nimport { EventTypeCode } from '../enums/EventTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\n\n\n\n// List of events related actions for the operator \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class EventsService {\n\n  // URL to web api\n  private baseUrl = '/events';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get single event by id\n   * @Return: EntityResponse<Event>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of events by query\n   * @Return: EntitiesResponse<Event>\n   */\n  find(accountId?: string, streamId?: string, deviceId?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = new Array();\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { PulseConfig } from '../../config';\n\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\nimport { Account } from '../entities/Account';\nimport { AccountTypeCode } from '../enums/AccountTypeCode';\n\n\n\n// List of account related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysAccountsService {\n\n  // URL to web api\n  private baseUrl = '/sys/accounts';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new account\n   * @Return: EntityResponse<Account>\n   */\n  create(body?: Account) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing account in the system\n   * @Return: EntityResponse<Account>\n   */\n  update(body?: Account) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete account from the system and all its related content\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single account by id\n   * @Return: EntityResponse<Account>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of accounts by query\n   * @Return: EntitiesResponse<Account>\n   */\n  find(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, size?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { PulseConfig } from '../../config';\n\nimport { Member } from '../entities/Member';\n\n\n\n// List of members related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysMembersService {\n\n  // URL to web api\n  private baseUrl = '/sys/members';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new member\n   * @Return: EntityResponse<Member>\n   */\n  create(body?: Member) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing member in the system\n   * @Return: EntityResponse<Member>\n   */\n  update(body?: Member) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete member from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single member by id\n   * @Return: EntityResponse<Member>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of members by query\n   * @Return: EntitiesResponse<Member>\n   */\n  find() {\n    return this.rest.get(`${this.baseUrl}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { PulseConfig } from '../../config';\n\nimport { Stream } from '../entities/Stream';\n\n\n\n// List of stream related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysStreamsService {\n\n  // URL to web api\n  private baseUrl = '/sys/streams';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new stream\n   * @Return: EntityResponse<Stream>\n   */\n  create(body?: Stream) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing stream in the system\n   * @Return: EntityResponse<Stream>\n   */\n  update(body?: Stream) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete a stream from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single stream by id\n   * @Return: EntityResponse<Stream>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of streams by query\n   * @Return: EntitiesResponse<Stream>\n   */\n  find(accountId?: string, search?: string, sort?: string, page?: number, size?: number) {\n    const params = new Array();\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { PulseConfig } from '../../config';\n\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { UserMemberships } from '../entities/UserMemberships';\nimport { User } from '../entities/User';\nimport { UserTypeCode } from '../enums/UserTypeCode';\n\n\n\n// List of users related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysUsersService {\n\n  // URL to web api\n  private baseUrl = '/sys/users';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new user\n   * @Return: EntityResponse<User>\n   */\n  create(body?: User) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing user in the system\n   * @Return: EntityResponse<User>\n   */\n  update(body?: User) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete a user from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single user by id\n   * @Return: EntityResponse<User>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of users by query\n   * @Return: EntitiesResponse<User>\n   */\n  find(search?: string, type?: UserTypeCode[], status?: UserStatusCode[], sort?: string, page?: number, size?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Create new user with all its accounts memberships\n   * @Return: EntityResponse<UserMemberships>\n   */\n  createMembership(body?: UserMemberships) {\n    return this.rest.post(`${this.baseUrl}/memberships`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { PulseConfig } from '../../config';\n\nimport { LoginParams } from '../common/LoginParams';\n\n\n\n// List of user related actions \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class UserService {\n\n  // URL to web api\n  private baseUrl = '/user';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Authorize user, verify user exists in the system (user was already authenticated by OAuth provider)\n   * The response includes access token valid for 20 minutes. The client side should renew the token before expiration using refresh-token method\n   * @Return: ActionResponse\n   */\n  authorize(body?: LoginParams) {\n    return this.rest.post(`${this.baseUrl}/authorize`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Refresh token (set new expiration time) and associate with new account if required\n   * The response includes the newly refreshed token both in the HTTP header and in the message body as data\n   * @Return: ActionResponse\n   */\n  setAccount(id?: string) {\n    return this.rest.post(`${this.baseUrl}/set-account/${id}`, '');\n  }\n\n}\n","import { SysAccountsService } from './sysAccountsService';\nimport { SysMembersService } from './sysMembersService';\nimport { SysStreamsService } from './sysStreamsService';\nimport { SysUsersService } from './sysUsersService';\nimport { UserService } from './userService';\nimport { DevicesService } from './devicesService';\nimport { EventsService } from './eventsService';\n\nexport const Services = [\n    SysAccountsService,\n    SysMembersService,\n    SysStreamsService,\n    SysUsersService,\n    UserService,\n    DevicesService,\n    EventsService,\n    \n]","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Services } from './lib/services/services.export';\nimport { RestUtil } from './utils/rest-util';\nimport { HttpClientModule } from '@angular/common/http';\nimport { PulseConfig } from './config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule]\n})\nexport class PulseLibModule {\n  static forRoot(config: PulseConfig): ModuleWithProviders<PulseLibModule> {\n    return {\n      ngModule: PulseLibModule,\n      providers: [\n        { provide: 'config', useValue: config },\n        RestUtil,\n        ...Services\n      ]\n    };\n  }\n}\n","/* Public API Surface of ng-pulse-lib */\nexport * from './lib';\nexport * from './core-lib.module';\nexport * from './utils';\nexport * from './config';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["LocalStorageUtil.removeToken","LocalStorageUtil.setToken","i1.RestUtil"],"mappings":"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"}