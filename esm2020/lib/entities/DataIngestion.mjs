// DataIngestion is the ingestion pipeline configuration
export class DataIngestion {
    constructor(inputFilesURIs, inputFilesExt, usageTimeWindowSec, sessionTimeWindowSec, usageOutputURIs, sessionOutputURIs, dNSOutputURIs, rawDataBackupURI, overwriteFiles, postAction) {
        if (inputFilesURIs !== undefined) {
            this.inputFilesURIs = inputFilesURIs;
        }
        if (inputFilesExt !== undefined) {
            this.inputFilesExt = inputFilesExt;
        }
        if (usageTimeWindowSec !== undefined) {
            this.usageTimeWindowSec = usageTimeWindowSec;
        }
        if (sessionTimeWindowSec !== undefined) {
            this.sessionTimeWindowSec = sessionTimeWindowSec;
        }
        if (usageOutputURIs !== undefined) {
            this.usageOutputURIs = usageOutputURIs;
        }
        if (sessionOutputURIs !== undefined) {
            this.sessionOutputURIs = sessionOutputURIs;
        }
        if (dNSOutputURIs !== undefined) {
            this.dNSOutputURIs = dNSOutputURIs;
        }
        if (rawDataBackupURI !== undefined) {
            this.rawDataBackupURI = rawDataBackupURI;
        }
        if (overwriteFiles !== undefined) {
            this.overwriteFiles = overwriteFiles;
        }
        if (postAction !== undefined) {
            this.postAction = postAction;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YUluZ2VzdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXB1bHNlLWxpYi9zcmMvbGliL2VudGl0aWVzL0RhdGFJbmdlc3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0Esd0RBQXdEO0FBQ3hELE1BQU0sT0FBTyxhQUFhO0lBZ0NyQixZQUFZLGNBQXlCLEVBQUUsYUFBd0IsRUFBRSxrQkFBMkIsRUFBRSxvQkFBNkIsRUFBRSxlQUEwQixFQUFFLGlCQUE0QixFQUFFLGFBQXdCLEVBQUUsZ0JBQXlCLEVBQUUsY0FBd0IsRUFBRSxVQUFtQjtRQUN0UixJQUFJLGNBQWMsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztTQUFFO1FBQzNFLElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1NBQUU7UUFDeEUsSUFBSSxrQkFBa0IsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7U0FBRTtRQUN2RixJQUFJLG9CQUFvQixLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQztTQUFFO1FBQzdGLElBQUksZUFBZSxLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO1NBQUU7UUFDOUUsSUFBSSxpQkFBaUIsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7U0FBRTtRQUNwRixJQUFJLGFBQWEsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztTQUFFO1FBQ3hFLElBQUksZ0JBQWdCLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO1NBQUU7UUFDakYsSUFBSSxjQUFjLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7U0FBRTtRQUMzRSxJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztTQUFFO0lBQ25FLENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5cbi8vIERhdGFJbmdlc3Rpb24gaXMgdGhlIGluZ2VzdGlvbiBwaXBlbGluZSBjb25maWd1cmF0aW9uXG5leHBvcnQgY2xhc3MgRGF0YUluZ2VzdGlvbiB7XG4gXG4gICAgLy8gSW5wdXQgZmlsZXMgbG9jYXRpb25zIFxuICAgIHB1YmxpYyBpbnB1dEZpbGVzVVJJczogc3RyaW5nW107XG4gXG4gICAgLy8gSW5wdXQgZmlsZXMgZXh0ZW5zaW9ucyAoZmlsdGVyIGJ5IGV4dGVuc2lvbnMpIC0gaWdub3JlIGlmIGVtcHR5IFxuICAgIHB1YmxpYyBpbnB1dEZpbGVzRXh0OiBzdHJpbmdbXTtcbiBcbiAgICAvLyBVc2FnZSB0aW1lIHdpbmRvdyBmb3IgYWdncmVnYXRpb24gKGluIHNlY29uZHMpIFxuICAgIHB1YmxpYyB1c2FnZVRpbWVXaW5kb3dTZWM6IG51bWJlcjtcbiBcbiAgICAvLyBTZXNzaW9uIHRpbWUgd2luZG93IGZvciBhZ2dyZWdhdGlvbiAoaW4gc2Vjb25kcykgXG4gICAgcHVibGljIHNlc3Npb25UaW1lV2luZG93U2VjOiBudW1iZXI7XG4gXG4gICAgLy8gVXNhZ2UgZGF0YSBvdXRwdXQgbG9jYXRpb25zIFxuICAgIHB1YmxpYyB1c2FnZU91dHB1dFVSSXM6IHN0cmluZ1tdO1xuIFxuICAgIC8vIFVzYWdlIGRhdGEgb3V0cHV0IGxvY2F0aW9ucyBcbiAgICBwdWJsaWMgc2Vzc2lvbk91dHB1dFVSSXM6IHN0cmluZ1tdO1xuIFxuICAgIC8vIFVzYWdlIGRhdGEgb3V0cHV0IGxvY2F0aW9ucyBcbiAgICBwdWJsaWMgZE5TT3V0cHV0VVJJczogc3RyaW5nW107XG4gXG4gICAgLy8gV2hlcmUgdG8gYmFjay11cCByYXcgZGF0YSBmaWxlcyBcbiAgICBwdWJsaWMgcmF3RGF0YUJhY2t1cFVSSTogc3RyaW5nO1xuIFxuICAgIC8vIEZsYWcgdG8gaW5kaWNhdGUgb3ZlcndyaXRlIGV4aXN0aW5nIGZpbGVzIFxuICAgIHB1YmxpYyBvdmVyd3JpdGVGaWxlczogYm9vbGVhbjtcbiBcbiAgICAvLyBQb3N0LXByb2Nlc3NpbmcgZmlsZSBhY3Rpb246IERFTEVURSB8IFJFTkFNRSB8IC4uLiBcbiAgICBwdWJsaWMgcG9zdEFjdGlvbjogc3RyaW5nO1xuIFxuICAgICBjb25zdHJ1Y3RvcihpbnB1dEZpbGVzVVJJcz86IHN0cmluZ1tdLCBpbnB1dEZpbGVzRXh0Pzogc3RyaW5nW10sIHVzYWdlVGltZVdpbmRvd1NlYz86IG51bWJlciwgc2Vzc2lvblRpbWVXaW5kb3dTZWM/OiBudW1iZXIsIHVzYWdlT3V0cHV0VVJJcz86IHN0cmluZ1tdLCBzZXNzaW9uT3V0cHV0VVJJcz86IHN0cmluZ1tdLCBkTlNPdXRwdXRVUklzPzogc3RyaW5nW10sIHJhd0RhdGFCYWNrdXBVUkk/OiBzdHJpbmcsIG92ZXJ3cml0ZUZpbGVzPzogYm9vbGVhbiwgcG9zdEFjdGlvbj86IHN0cmluZykgeyBcbiAgICAgICAgaWYgKGlucHV0RmlsZXNVUklzICE9PSB1bmRlZmluZWQpIHsgdGhpcy5pbnB1dEZpbGVzVVJJcyA9IGlucHV0RmlsZXNVUklzOyB9XG4gICAgICAgIGlmIChpbnB1dEZpbGVzRXh0ICE9PSB1bmRlZmluZWQpIHsgdGhpcy5pbnB1dEZpbGVzRXh0ID0gaW5wdXRGaWxlc0V4dDsgfVxuICAgICAgICBpZiAodXNhZ2VUaW1lV2luZG93U2VjICE9PSB1bmRlZmluZWQpIHsgdGhpcy51c2FnZVRpbWVXaW5kb3dTZWMgPSB1c2FnZVRpbWVXaW5kb3dTZWM7IH1cbiAgICAgICAgaWYgKHNlc3Npb25UaW1lV2luZG93U2VjICE9PSB1bmRlZmluZWQpIHsgdGhpcy5zZXNzaW9uVGltZVdpbmRvd1NlYyA9IHNlc3Npb25UaW1lV2luZG93U2VjOyB9XG4gICAgICAgIGlmICh1c2FnZU91dHB1dFVSSXMgIT09IHVuZGVmaW5lZCkgeyB0aGlzLnVzYWdlT3V0cHV0VVJJcyA9IHVzYWdlT3V0cHV0VVJJczsgfVxuICAgICAgICBpZiAoc2Vzc2lvbk91dHB1dFVSSXMgIT09IHVuZGVmaW5lZCkgeyB0aGlzLnNlc3Npb25PdXRwdXRVUklzID0gc2Vzc2lvbk91dHB1dFVSSXM7IH1cbiAgICAgICAgaWYgKGROU091dHB1dFVSSXMgIT09IHVuZGVmaW5lZCkgeyB0aGlzLmROU091dHB1dFVSSXMgPSBkTlNPdXRwdXRVUklzOyB9XG4gICAgICAgIGlmIChyYXdEYXRhQmFja3VwVVJJICE9PSB1bmRlZmluZWQpIHsgdGhpcy5yYXdEYXRhQmFja3VwVVJJID0gcmF3RGF0YUJhY2t1cFVSSTsgfVxuICAgICAgICBpZiAob3ZlcndyaXRlRmlsZXMgIT09IHVuZGVmaW5lZCkgeyB0aGlzLm92ZXJ3cml0ZUZpbGVzID0gb3ZlcndyaXRlRmlsZXM7IH1cbiAgICAgICAgaWYgKHBvc3RBY3Rpb24gIT09IHVuZGVmaW5lZCkgeyB0aGlzLnBvc3RBY3Rpb24gPSBwb3N0QWN0aW9uOyB9XG4gICAgfVxuXG59XG5cblxuIl19