// DataIngestion is the ingestion pipeline configuration
export class DataIngestion {
    constructor(inputFilesURIs, inputFilesExt, subNets, usageTimeWindowSec, sessionTimeWindowSec, usageOutputURIs, sessionOutputURIs, dNSOutputURIs, rawDataBackupURI, overwriteFiles, postAction, schedule) {
        if (inputFilesURIs !== undefined) {
            this.inputFilesURIs = inputFilesURIs;
        }
        if (inputFilesExt !== undefined) {
            this.inputFilesExt = inputFilesExt;
        }
        if (subNets !== undefined) {
            this.subNets = subNets;
        }
        if (usageTimeWindowSec !== undefined) {
            this.usageTimeWindowSec = usageTimeWindowSec;
        }
        if (sessionTimeWindowSec !== undefined) {
            this.sessionTimeWindowSec = sessionTimeWindowSec;
        }
        if (usageOutputURIs !== undefined) {
            this.usageOutputURIs = usageOutputURIs;
        }
        if (sessionOutputURIs !== undefined) {
            this.sessionOutputURIs = sessionOutputURIs;
        }
        if (dNSOutputURIs !== undefined) {
            this.dNSOutputURIs = dNSOutputURIs;
        }
        if (rawDataBackupURI !== undefined) {
            this.rawDataBackupURI = rawDataBackupURI;
        }
        if (overwriteFiles !== undefined) {
            this.overwriteFiles = overwriteFiles;
        }
        if (postAction !== undefined) {
            this.postAction = postAction;
        }
        if (schedule !== undefined) {
            this.schedule = schedule;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YUluZ2VzdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXB1bHNlLWxpYi9zcmMvbGliL2VudGl0aWVzL0RhdGFJbmdlc3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0Esd0RBQXdEO0FBQ3hELE1BQU0sT0FBTyxhQUFhO0lBc0NyQixZQUFZLGNBQXlCLEVBQUUsYUFBd0IsRUFBRSxPQUFrQixFQUFFLGtCQUEyQixFQUFFLG9CQUE2QixFQUFFLGVBQTBCLEVBQUUsaUJBQTRCLEVBQUUsYUFBd0IsRUFBRSxnQkFBeUIsRUFBRSxjQUF3QixFQUFFLFVBQW1CLEVBQUUsUUFBaUI7UUFDN1QsSUFBSSxjQUFjLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7U0FBRTtRQUMzRSxJQUFJLGFBQWEsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztTQUFFO1FBQ3hFLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1NBQUU7UUFDdEQsSUFBSSxrQkFBa0IsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7U0FBRTtRQUN2RixJQUFJLG9CQUFvQixLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQztTQUFFO1FBQzdGLElBQUksZUFBZSxLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO1NBQUU7UUFDOUUsSUFBSSxpQkFBaUIsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7U0FBRTtRQUNwRixJQUFJLGFBQWEsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztTQUFFO1FBQ3hFLElBQUksZ0JBQWdCLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO1NBQUU7UUFDakYsSUFBSSxjQUFjLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7U0FBRTtRQUMzRSxJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztTQUFFO1FBQy9ELElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1NBQUU7SUFDN0QsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiXG5cblxuLy8gRGF0YUluZ2VzdGlvbiBpcyB0aGUgaW5nZXN0aW9uIHBpcGVsaW5lIGNvbmZpZ3VyYXRpb25cbmV4cG9ydCBjbGFzcyBEYXRhSW5nZXN0aW9uIHtcbiBcbiAgICAvLyBJbnB1dCBmaWxlcyBsb2NhdGlvbnMgXG4gICAgcHVibGljIGlucHV0RmlsZXNVUklzOiBzdHJpbmdbXTtcbiBcbiAgICAvLyBJbnB1dCBmaWxlcyBleHRlbnNpb25zIChmaWx0ZXIgYnkgZXh0ZW5zaW9ucykgLSBpZ25vcmUgaWYgZW1wdHkgXG4gICAgcHVibGljIGlucHV0RmlsZXNFeHQ6IHN0cmluZ1tdO1xuIFxuICAgIC8vIExpc3Qgb2YgSW9UIGRldmljZXMgc3VibmV0cyAtIGlnbm9yZSBpZiBlbXB0eSBcbiAgICBwdWJsaWMgc3ViTmV0czogc3RyaW5nW107XG4gXG4gICAgLy8gVXNhZ2UgdGltZSB3aW5kb3cgZm9yIGFnZ3JlZ2F0aW9uIChpbiBzZWNvbmRzKSBcbiAgICBwdWJsaWMgdXNhZ2VUaW1lV2luZG93U2VjOiBudW1iZXI7XG4gXG4gICAgLy8gU2Vzc2lvbiB0aW1lIHdpbmRvdyBmb3IgYWdncmVnYXRpb24gKGluIHNlY29uZHMpIFxuICAgIHB1YmxpYyBzZXNzaW9uVGltZVdpbmRvd1NlYzogbnVtYmVyO1xuIFxuICAgIC8vIFVzYWdlIGRhdGEgb3V0cHV0IGxvY2F0aW9ucyBcbiAgICBwdWJsaWMgdXNhZ2VPdXRwdXRVUklzOiBzdHJpbmdbXTtcbiBcbiAgICAvLyBVc2FnZSBkYXRhIG91dHB1dCBsb2NhdGlvbnMgXG4gICAgcHVibGljIHNlc3Npb25PdXRwdXRVUklzOiBzdHJpbmdbXTtcbiBcbiAgICAvLyBVc2FnZSBkYXRhIG91dHB1dCBsb2NhdGlvbnMgXG4gICAgcHVibGljIGROU091dHB1dFVSSXM6IHN0cmluZ1tdO1xuIFxuICAgIC8vIFdoZXJlIHRvIGJhY2stdXAgcmF3IGRhdGEgZmlsZXMgXG4gICAgcHVibGljIHJhd0RhdGFCYWNrdXBVUkk6IHN0cmluZztcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIG92ZXJ3cml0ZSBleGlzdGluZyBmaWxlcyBcbiAgICBwdWJsaWMgb3ZlcndyaXRlRmlsZXM6IGJvb2xlYW47XG4gXG4gICAgLy8gUG9zdC1wcm9jZXNzaW5nIGZpbGUgYWN0aW9uOiBERUxFVEUgfCBSRU5BTUUgfCAuLi4gXG4gICAgcHVibGljIHBvc3RBY3Rpb246IHN0cmluZztcbiBcbiAgICAvLyBDcm9uIHNjaGVkdWxlIHRlbXBsYXRlIGluIDYgc2VnbWVudCBmb3JtYXQgKHNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3JvbikgLSBsZWF2ZSBlbXB0eSBmb3IgYW4gaG91cmx5IHNjaGVkdWxlIFxuICAgIHB1YmxpYyBzY2hlZHVsZTogc3RyaW5nO1xuIFxuICAgICBjb25zdHJ1Y3RvcihpbnB1dEZpbGVzVVJJcz86IHN0cmluZ1tdLCBpbnB1dEZpbGVzRXh0Pzogc3RyaW5nW10sIHN1Yk5ldHM/OiBzdHJpbmdbXSwgdXNhZ2VUaW1lV2luZG93U2VjPzogbnVtYmVyLCBzZXNzaW9uVGltZVdpbmRvd1NlYz86IG51bWJlciwgdXNhZ2VPdXRwdXRVUklzPzogc3RyaW5nW10sIHNlc3Npb25PdXRwdXRVUklzPzogc3RyaW5nW10sIGROU091dHB1dFVSSXM/OiBzdHJpbmdbXSwgcmF3RGF0YUJhY2t1cFVSST86IHN0cmluZywgb3ZlcndyaXRlRmlsZXM/OiBib29sZWFuLCBwb3N0QWN0aW9uPzogc3RyaW5nLCBzY2hlZHVsZT86IHN0cmluZykgeyBcbiAgICAgICAgaWYgKGlucHV0RmlsZXNVUklzICE9PSB1bmRlZmluZWQpIHsgdGhpcy5pbnB1dEZpbGVzVVJJcyA9IGlucHV0RmlsZXNVUklzOyB9XG4gICAgICAgIGlmIChpbnB1dEZpbGVzRXh0ICE9PSB1bmRlZmluZWQpIHsgdGhpcy5pbnB1dEZpbGVzRXh0ID0gaW5wdXRGaWxlc0V4dDsgfVxuICAgICAgICBpZiAoc3ViTmV0cyAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuc3ViTmV0cyA9IHN1Yk5ldHM7IH1cbiAgICAgICAgaWYgKHVzYWdlVGltZVdpbmRvd1NlYyAhPT0gdW5kZWZpbmVkKSB7IHRoaXMudXNhZ2VUaW1lV2luZG93U2VjID0gdXNhZ2VUaW1lV2luZG93U2VjOyB9XG4gICAgICAgIGlmIChzZXNzaW9uVGltZVdpbmRvd1NlYyAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuc2Vzc2lvblRpbWVXaW5kb3dTZWMgPSBzZXNzaW9uVGltZVdpbmRvd1NlYzsgfVxuICAgICAgICBpZiAodXNhZ2VPdXRwdXRVUklzICE9PSB1bmRlZmluZWQpIHsgdGhpcy51c2FnZU91dHB1dFVSSXMgPSB1c2FnZU91dHB1dFVSSXM7IH1cbiAgICAgICAgaWYgKHNlc3Npb25PdXRwdXRVUklzICE9PSB1bmRlZmluZWQpIHsgdGhpcy5zZXNzaW9uT3V0cHV0VVJJcyA9IHNlc3Npb25PdXRwdXRVUklzOyB9XG4gICAgICAgIGlmIChkTlNPdXRwdXRVUklzICE9PSB1bmRlZmluZWQpIHsgdGhpcy5kTlNPdXRwdXRVUklzID0gZE5TT3V0cHV0VVJJczsgfVxuICAgICAgICBpZiAocmF3RGF0YUJhY2t1cFVSSSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMucmF3RGF0YUJhY2t1cFVSSSA9IHJhd0RhdGFCYWNrdXBVUkk7IH1cbiAgICAgICAgaWYgKG92ZXJ3cml0ZUZpbGVzICE9PSB1bmRlZmluZWQpIHsgdGhpcy5vdmVyd3JpdGVGaWxlcyA9IG92ZXJ3cml0ZUZpbGVzOyB9XG4gICAgICAgIGlmIChwb3N0QWN0aW9uICE9PSB1bmRlZmluZWQpIHsgdGhpcy5wb3N0QWN0aW9uID0gcG9zdEFjdGlvbjsgfVxuICAgICAgICBpZiAoc2NoZWR1bGUgIT09IHVuZGVmaW5lZCkgeyB0aGlzLnNjaGVkdWxlID0gc2NoZWR1bGU7IH1cbiAgICB9XG5cbn1cblxuXG4iXX0=