// Device status code
export var DeviceStatusCode;
(function (DeviceStatusCode) {
    // Undefined [0] 
    DeviceStatusCode[DeviceStatusCode["UNDEFINED"] = 0] = "UNDEFINED";
    // Device is registered and pending verification [1] 
    DeviceStatusCode[DeviceStatusCode["PENDING"] = 1] = "PENDING";
    // Active device in the system [2] 
    DeviceStatusCode[DeviceStatusCode["ACTIVE"] = 2] = "ACTIVE";
    // Inactive device [3] 
    DeviceStatusCode[DeviceStatusCode["INACTIVE"] = 3] = "INACTIVE";
    // Blocked device [4] 
    DeviceStatusCode[DeviceStatusCode["BLOCKED"] = 4] = "BLOCKED";
})(DeviceStatusCode || (DeviceStatusCode = {}));
// Return list of DeviceStatusCode values and their display names
export function GetDeviceStatusCodes() {
    let result = new Map();
    result.set(DeviceStatusCode.UNDEFINED, 'Undefined');
    result.set(DeviceStatusCode.PENDING, 'Pending');
    result.set(DeviceStatusCode.ACTIVE, 'Active');
    result.set(DeviceStatusCode.INACTIVE, 'Inactive');
    result.set(DeviceStatusCode.BLOCKED, 'Blocked');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGV2aWNlU3RhdHVzQ29kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXB1bHNlLWxpYi9zcmMvbGliL2VudW1zL0RldmljZVN0YXR1c0NvZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBTixJQUFZLGdCQWlCWDtBQWpCRCxXQUFZLGdCQUFnQjtJQUV4QixpQkFBaUI7SUFDakIsaUVBQWEsQ0FBQTtJQUViLHFEQUFxRDtJQUNyRCw2REFBVyxDQUFBO0lBRVgsbUNBQW1DO0lBQ25DLDJEQUFVLENBQUE7SUFFVix1QkFBdUI7SUFDdkIsK0RBQVksQ0FBQTtJQUVaLHNCQUFzQjtJQUN0Qiw2REFBVyxDQUFBO0FBRWYsQ0FBQyxFQWpCVyxnQkFBZ0IsS0FBaEIsZ0JBQWdCLFFBaUIzQjtBQUVELGlFQUFpRTtBQUNqRSxNQUFNLFVBQVUsb0JBQW9CO0lBRWhDLElBQUksTUFBTSxHQUFHLElBQUksR0FBRyxFQUE0QixDQUFDO0lBR2pELE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRXBELE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRWhELE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRTlDLE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRWxELE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBR2hELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIERldmljZSBzdGF0dXMgY29kZVxuZXhwb3J0IGVudW0gRGV2aWNlU3RhdHVzQ29kZSB7XG4gXG4gICAgLy8gVW5kZWZpbmVkIFswXSBcbiAgICBVTkRFRklORUQgPSAwLFxuIFxuICAgIC8vIERldmljZSBpcyByZWdpc3RlcmVkIGFuZCBwZW5kaW5nIHZlcmlmaWNhdGlvbiBbMV0gXG4gICAgUEVORElORyA9IDEsXG4gXG4gICAgLy8gQWN0aXZlIGRldmljZSBpbiB0aGUgc3lzdGVtIFsyXSBcbiAgICBBQ1RJVkUgPSAyLFxuIFxuICAgIC8vIEluYWN0aXZlIGRldmljZSBbM10gXG4gICAgSU5BQ1RJVkUgPSAzLFxuIFxuICAgIC8vIEJsb2NrZWQgZGV2aWNlIFs0XSBcbiAgICBCTE9DS0VEID0gNCxcbiBcbn1cblxuLy8gUmV0dXJuIGxpc3Qgb2YgRGV2aWNlU3RhdHVzQ29kZSB2YWx1ZXMgYW5kIHRoZWlyIGRpc3BsYXkgbmFtZXNcbmV4cG9ydCBmdW5jdGlvbiBHZXREZXZpY2VTdGF0dXNDb2RlcygpIDogTWFwPERldmljZVN0YXR1c0NvZGUsIHN0cmluZz4ge1xuXG4gICAgbGV0IHJlc3VsdCA9IG5ldyBNYXA8RGV2aWNlU3RhdHVzQ29kZSwgc3RyaW5nPigpO1xuXG4gICAgXG4gICAgcmVzdWx0LnNldChEZXZpY2VTdGF0dXNDb2RlLlVOREVGSU5FRCwgJ1VuZGVmaW5lZCcpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRGV2aWNlU3RhdHVzQ29kZS5QRU5ESU5HLCAnUGVuZGluZycpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRGV2aWNlU3RhdHVzQ29kZS5BQ1RJVkUsICdBY3RpdmUnKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KERldmljZVN0YXR1c0NvZGUuSU5BQ1RJVkUsICdJbmFjdGl2ZScpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRGV2aWNlU3RhdHVzQ29kZS5CTE9DS0VELCAnQmxvY2tlZCcpO1xuICAgIFxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn0iXX0=