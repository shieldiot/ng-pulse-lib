// Device type code
export var DeviceTypeCode;
(function (DeviceTypeCode) {
    // Undefined [0] 
    DeviceTypeCode[DeviceTypeCode["UNDEFINED"] = 0] = "UNDEFINED";
    // Other (Unknown Device) [1] 
    DeviceTypeCode[DeviceTypeCode["OTHER"] = 1] = "OTHER";
    // Industrial Controller [1] 
    DeviceTypeCode[DeviceTypeCode["CONTROLLER"] = 2] = "CONTROLLER";
    // General smart meter [2] 
    DeviceTypeCode[DeviceTypeCode["METER"] = 3] = "METER";
    // General sensor [3] 
    DeviceTypeCode[DeviceTypeCode["SENSOR"] = 4] = "SENSOR";
    // General camera [4] 
    DeviceTypeCode[DeviceTypeCode["CAMERA"] = 5] = "CAMERA";
    // Point of sale [5] 
    DeviceTypeCode[DeviceTypeCode["POS"] = 6] = "POS";
    // Pump [6] 
    DeviceTypeCode[DeviceTypeCode["PUMP"] = 7] = "PUMP";
    // EV charging station [7] 
    DeviceTypeCode[DeviceTypeCode["CHARGING_STATION"] = 8] = "CHARGING_STATION";
    // Smart lightning [8] 
    DeviceTypeCode[DeviceTypeCode["LIGHTNING"] = 9] = "LIGHTNING";
    // Temperature sensor [9] 
    DeviceTypeCode[DeviceTypeCode["TEMPERATURE_SENSOR"] = 10] = "TEMPERATURE_SENSOR";
    // Air Quality sensor [10] 
    DeviceTypeCode[DeviceTypeCode["AIR_QUALITY_SENSOR"] = 11] = "AIR_QUALITY_SENSOR";
    // Valve [11] 
    DeviceTypeCode[DeviceTypeCode["VALVE"] = 12] = "VALVE";
    // Gateway [12] 
    DeviceTypeCode[DeviceTypeCode["GATEWAY"] = 13] = "GATEWAY";
})(DeviceTypeCode || (DeviceTypeCode = {}));
// Return list of DeviceTypeCode values and their display names
export function GetDeviceTypeCodes() {
    let result = new Map();
    result.set(DeviceTypeCode.UNDEFINED, 'Undefined');
    result.set(DeviceTypeCode.OTHER, 'Other');
    result.set(DeviceTypeCode.CONTROLLER, 'Controller');
    result.set(DeviceTypeCode.METER, 'Meter');
    result.set(DeviceTypeCode.SENSOR, 'Sensor');
    result.set(DeviceTypeCode.CAMERA, 'Camera');
    result.set(DeviceTypeCode.POS, 'Pos');
    result.set(DeviceTypeCode.PUMP, 'Pump');
    result.set(DeviceTypeCode.CHARGING_STATION, 'Charging Station');
    result.set(DeviceTypeCode.LIGHTNING, 'Lightning');
    result.set(DeviceTypeCode.TEMPERATURE_SENSOR, 'Temperature Sensor');
    result.set(DeviceTypeCode.AIR_QUALITY_SENSOR, 'Air Quality Sensor');
    result.set(DeviceTypeCode.VALVE, 'Valve');
    result.set(DeviceTypeCode.GATEWAY, 'Gateway');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGV2aWNlVHlwZUNvZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1wdWxzZS1saWIvc3JjL2xpYi9lbnVtcy9EZXZpY2VUeXBlQ29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxtQkFBbUI7QUFDbkIsTUFBTSxDQUFOLElBQVksY0E0Q1g7QUE1Q0QsV0FBWSxjQUFjO0lBRXRCLGlCQUFpQjtJQUNqQiw2REFBYSxDQUFBO0lBRWIsOEJBQThCO0lBQzlCLHFEQUFTLENBQUE7SUFFVCw2QkFBNkI7SUFDN0IsK0RBQWMsQ0FBQTtJQUVkLDJCQUEyQjtJQUMzQixxREFBUyxDQUFBO0lBRVQsc0JBQXNCO0lBQ3RCLHVEQUFVLENBQUE7SUFFVixzQkFBc0I7SUFDdEIsdURBQVUsQ0FBQTtJQUVWLHFCQUFxQjtJQUNyQixpREFBTyxDQUFBO0lBRVAsWUFBWTtJQUNaLG1EQUFRLENBQUE7SUFFUiwyQkFBMkI7SUFDM0IsMkVBQW9CLENBQUE7SUFFcEIsdUJBQXVCO0lBQ3ZCLDZEQUFhLENBQUE7SUFFYiwwQkFBMEI7SUFDMUIsZ0ZBQXVCLENBQUE7SUFFdkIsMkJBQTJCO0lBQzNCLGdGQUF1QixDQUFBO0lBRXZCLGNBQWM7SUFDZCxzREFBVSxDQUFBO0lBRVYsZ0JBQWdCO0lBQ2hCLDBEQUFZLENBQUE7QUFFaEIsQ0FBQyxFQTVDVyxjQUFjLEtBQWQsY0FBYyxRQTRDekI7QUFFRCwrREFBK0Q7QUFDL0QsTUFBTSxVQUFVLGtCQUFrQjtJQUU5QixJQUFJLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBMEIsQ0FBQztJQUcvQyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFbEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUVwRCxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFMUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRTVDLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUU1QyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFdEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRXhDLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGdCQUFnQixFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFFaEUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRWxELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGtCQUFrQixFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFFcEUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsa0JBQWtCLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztJQUVwRSxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFMUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRzlDLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIERldmljZSB0eXBlIGNvZGVcbmV4cG9ydCBlbnVtIERldmljZVR5cGVDb2RlIHtcbiBcbiAgICAvLyBVbmRlZmluZWQgWzBdIFxuICAgIFVOREVGSU5FRCA9IDAsXG4gXG4gICAgLy8gT3RoZXIgKFVua25vd24gRGV2aWNlKSBbMV0gXG4gICAgT1RIRVIgPSAxLFxuIFxuICAgIC8vIEluZHVzdHJpYWwgQ29udHJvbGxlciBbMV0gXG4gICAgQ09OVFJPTExFUiA9IDIsXG4gXG4gICAgLy8gR2VuZXJhbCBzbWFydCBtZXRlciBbMl0gXG4gICAgTUVURVIgPSAzLFxuIFxuICAgIC8vIEdlbmVyYWwgc2Vuc29yIFszXSBcbiAgICBTRU5TT1IgPSA0LFxuIFxuICAgIC8vIEdlbmVyYWwgY2FtZXJhIFs0XSBcbiAgICBDQU1FUkEgPSA1LFxuIFxuICAgIC8vIFBvaW50IG9mIHNhbGUgWzVdIFxuICAgIFBPUyA9IDYsXG4gXG4gICAgLy8gUHVtcCBbNl0gXG4gICAgUFVNUCA9IDcsXG4gXG4gICAgLy8gRVYgY2hhcmdpbmcgc3RhdGlvbiBbN10gXG4gICAgQ0hBUkdJTkdfU1RBVElPTiA9IDgsXG4gXG4gICAgLy8gU21hcnQgbGlnaHRuaW5nIFs4XSBcbiAgICBMSUdIVE5JTkcgPSA5LFxuIFxuICAgIC8vIFRlbXBlcmF0dXJlIHNlbnNvciBbOV0gXG4gICAgVEVNUEVSQVRVUkVfU0VOU09SID0gMTAsXG4gXG4gICAgLy8gQWlyIFF1YWxpdHkgc2Vuc29yIFsxMF0gXG4gICAgQUlSX1FVQUxJVFlfU0VOU09SID0gMTEsXG4gXG4gICAgLy8gVmFsdmUgWzExXSBcbiAgICBWQUxWRSA9IDEyLFxuIFxuICAgIC8vIEdhdGV3YXkgWzEyXSBcbiAgICBHQVRFV0FZID0gMTMsXG4gXG59XG5cbi8vIFJldHVybiBsaXN0IG9mIERldmljZVR5cGVDb2RlIHZhbHVlcyBhbmQgdGhlaXIgZGlzcGxheSBuYW1lc1xuZXhwb3J0IGZ1bmN0aW9uIEdldERldmljZVR5cGVDb2RlcygpIDogTWFwPERldmljZVR5cGVDb2RlLCBzdHJpbmc+IHtcblxuICAgIGxldCByZXN1bHQgPSBuZXcgTWFwPERldmljZVR5cGVDb2RlLCBzdHJpbmc+KCk7XG5cbiAgICBcbiAgICByZXN1bHQuc2V0KERldmljZVR5cGVDb2RlLlVOREVGSU5FRCwgJ1VuZGVmaW5lZCcpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRGV2aWNlVHlwZUNvZGUuT1RIRVIsICdPdGhlcicpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRGV2aWNlVHlwZUNvZGUuQ09OVFJPTExFUiwgJ0NvbnRyb2xsZXInKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KERldmljZVR5cGVDb2RlLk1FVEVSLCAnTWV0ZXInKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KERldmljZVR5cGVDb2RlLlNFTlNPUiwgJ1NlbnNvcicpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRGV2aWNlVHlwZUNvZGUuQ0FNRVJBLCAnQ2FtZXJhJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChEZXZpY2VUeXBlQ29kZS5QT1MsICdQb3MnKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KERldmljZVR5cGVDb2RlLlBVTVAsICdQdW1wJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChEZXZpY2VUeXBlQ29kZS5DSEFSR0lOR19TVEFUSU9OLCAnQ2hhcmdpbmcgU3RhdGlvbicpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRGV2aWNlVHlwZUNvZGUuTElHSFROSU5HLCAnTGlnaHRuaW5nJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChEZXZpY2VUeXBlQ29kZS5URU1QRVJBVFVSRV9TRU5TT1IsICdUZW1wZXJhdHVyZSBTZW5zb3InKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KERldmljZVR5cGVDb2RlLkFJUl9RVUFMSVRZX1NFTlNPUiwgJ0FpciBRdWFsaXR5IFNlbnNvcicpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRGV2aWNlVHlwZUNvZGUuVkFMVkUsICdWYWx2ZScpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRGV2aWNlVHlwZUNvZGUuR0FURVdBWSwgJ0dhdGV3YXknKTtcbiAgICBcblxuICAgIHJldHVybiByZXN1bHQ7XG59Il19