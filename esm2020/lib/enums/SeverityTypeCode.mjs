// Severity type (level) code
export var SeverityTypeCode;
(function (SeverityTypeCode) {
    // Undefined [0] 
    SeverityTypeCode[SeverityTypeCode["UNDEFINED"] = 0] = "UNDEFINED";
    // No effect [1] 
    SeverityTypeCode[SeverityTypeCode["NO_EFFECT"] = 1] = "NO_EFFECT";
    // Notification only [2] 
    SeverityTypeCode[SeverityTypeCode["NOTIFICATION"] = 2] = "NOTIFICATION";
    // Lowest severity [3] 
    SeverityTypeCode[SeverityTypeCode["LOWEST"] = 3] = "LOWEST";
    // Low severity [4] 
    SeverityTypeCode[SeverityTypeCode["LOW"] = 4] = "LOW";
    // Medium severity [5] 
    SeverityTypeCode[SeverityTypeCode["MEDIUM"] = 5] = "MEDIUM";
    // High severity [6] 
    SeverityTypeCode[SeverityTypeCode["HIGH"] = 6] = "HIGH";
    // Highest severity [7] 
    SeverityTypeCode[SeverityTypeCode["HIGHEST"] = 7] = "HIGHEST";
    // Critical severity [8] 
    SeverityTypeCode[SeverityTypeCode["CRITICAL"] = 8] = "CRITICAL";
})(SeverityTypeCode || (SeverityTypeCode = {}));
// Return list of SeverityTypeCode values and their display names
export function GetSeverityTypeCodes() {
    let result = new Map();
    result.set(SeverityTypeCode.UNDEFINED, 'Undefined');
    result.set(SeverityTypeCode.NO_EFFECT, 'No Effect');
    result.set(SeverityTypeCode.NOTIFICATION, 'Notification');
    result.set(SeverityTypeCode.LOWEST, 'Lowest');
    result.set(SeverityTypeCode.LOW, 'Low');
    result.set(SeverityTypeCode.MEDIUM, 'Medium');
    result.set(SeverityTypeCode.HIGH, 'High');
    result.set(SeverityTypeCode.HIGHEST, 'Highest');
    result.set(SeverityTypeCode.CRITICAL, 'Critical');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V2ZXJpdHlUeXBlQ29kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXB1bHNlLWxpYi9zcmMvbGliL2VudW1zL1NldmVyaXR5VHlwZUNvZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsNkJBQTZCO0FBQzdCLE1BQU0sQ0FBTixJQUFZLGdCQTZCWDtBQTdCRCxXQUFZLGdCQUFnQjtJQUV4QixpQkFBaUI7SUFDakIsaUVBQWEsQ0FBQTtJQUViLGlCQUFpQjtJQUNqQixpRUFBYSxDQUFBO0lBRWIseUJBQXlCO0lBQ3pCLHVFQUFnQixDQUFBO0lBRWhCLHVCQUF1QjtJQUN2QiwyREFBVSxDQUFBO0lBRVYsb0JBQW9CO0lBQ3BCLHFEQUFPLENBQUE7SUFFUCx1QkFBdUI7SUFDdkIsMkRBQVUsQ0FBQTtJQUVWLHFCQUFxQjtJQUNyQix1REFBUSxDQUFBO0lBRVIsd0JBQXdCO0lBQ3hCLDZEQUFXLENBQUE7SUFFWCx5QkFBeUI7SUFDekIsK0RBQVksQ0FBQTtBQUVoQixDQUFDLEVBN0JXLGdCQUFnQixLQUFoQixnQkFBZ0IsUUE2QjNCO0FBRUQsaUVBQWlFO0FBQ2pFLE1BQU0sVUFBVSxvQkFBb0I7SUFFaEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQTRCLENBQUM7SUFHakQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFcEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFcEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFFMUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFOUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFeEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFOUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFMUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFaEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFHbEQsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gU2V2ZXJpdHkgdHlwZSAobGV2ZWwpIGNvZGVcbmV4cG9ydCBlbnVtIFNldmVyaXR5VHlwZUNvZGUge1xuIFxuICAgIC8vIFVuZGVmaW5lZCBbMF0gXG4gICAgVU5ERUZJTkVEID0gMCxcbiBcbiAgICAvLyBObyBlZmZlY3QgWzFdIFxuICAgIE5PX0VGRkVDVCA9IDEsXG4gXG4gICAgLy8gTm90aWZpY2F0aW9uIG9ubHkgWzJdIFxuICAgIE5PVElGSUNBVElPTiA9IDIsXG4gXG4gICAgLy8gTG93ZXN0IHNldmVyaXR5IFszXSBcbiAgICBMT1dFU1QgPSAzLFxuIFxuICAgIC8vIExvdyBzZXZlcml0eSBbNF0gXG4gICAgTE9XID0gNCxcbiBcbiAgICAvLyBNZWRpdW0gc2V2ZXJpdHkgWzVdIFxuICAgIE1FRElVTSA9IDUsXG4gXG4gICAgLy8gSGlnaCBzZXZlcml0eSBbNl0gXG4gICAgSElHSCA9IDYsXG4gXG4gICAgLy8gSGlnaGVzdCBzZXZlcml0eSBbN10gXG4gICAgSElHSEVTVCA9IDcsXG4gXG4gICAgLy8gQ3JpdGljYWwgc2V2ZXJpdHkgWzhdIFxuICAgIENSSVRJQ0FMID0gOCxcbiBcbn1cblxuLy8gUmV0dXJuIGxpc3Qgb2YgU2V2ZXJpdHlUeXBlQ29kZSB2YWx1ZXMgYW5kIHRoZWlyIGRpc3BsYXkgbmFtZXNcbmV4cG9ydCBmdW5jdGlvbiBHZXRTZXZlcml0eVR5cGVDb2RlcygpIDogTWFwPFNldmVyaXR5VHlwZUNvZGUsIHN0cmluZz4ge1xuXG4gICAgbGV0IHJlc3VsdCA9IG5ldyBNYXA8U2V2ZXJpdHlUeXBlQ29kZSwgc3RyaW5nPigpO1xuXG4gICAgXG4gICAgcmVzdWx0LnNldChTZXZlcml0eVR5cGVDb2RlLlVOREVGSU5FRCwgJ1VuZGVmaW5lZCcpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoU2V2ZXJpdHlUeXBlQ29kZS5OT19FRkZFQ1QsICdObyBFZmZlY3QnKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KFNldmVyaXR5VHlwZUNvZGUuTk9USUZJQ0FUSU9OLCAnTm90aWZpY2F0aW9uJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChTZXZlcml0eVR5cGVDb2RlLkxPV0VTVCwgJ0xvd2VzdCcpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoU2V2ZXJpdHlUeXBlQ29kZS5MT1csICdMb3cnKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KFNldmVyaXR5VHlwZUNvZGUuTUVESVVNLCAnTWVkaXVtJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChTZXZlcml0eVR5cGVDb2RlLkhJR0gsICdIaWdoJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChTZXZlcml0eVR5cGVDb2RlLkhJR0hFU1QsICdIaWdoZXN0Jyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChTZXZlcml0eVR5cGVDb2RlLkNSSVRJQ0FMLCAnQ3JpdGljYWwnKTtcbiAgICBcblxuICAgIHJldHVybiByZXN1bHQ7XG59Il19